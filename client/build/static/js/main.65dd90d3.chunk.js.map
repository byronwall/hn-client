{"version":3,"sources":["LocalStorageWrapper.tsx","getDomain.tsx","HnCommentList.tsx","timeSince.tsx","HnComment.tsx","HnStoryPage.tsx","App.tsx","DataLayer.tsx","Header.tsx","HnListItem.tsx","HnStoryList.tsx","serviceWorker.ts","index.tsx"],"names":["LocalStorageWrapper","props","state","item","undefined","localForage","getItem","this","storageName","itemCompressed","setState","dataDidUpdate","removeItem","obj","JSON","parse","prevProps","prevState","_","isEqual","activeItem","console","log","strToStore","stringify","setItem","React","Component","getDomain","url","matches","match","HnCommentList","childRefs","childComments","forEach","id","createRef","validChildren","filter","comm","Fragment","map","childComm","index","key","comment","depth","canExpand","ref","onUpdateOpen","newOpen","scrollId","isOpen","collapsedIds","findIndex","c","idToScrollTo","timeSince","date","seconds","Math","floor","Date","getTime","interval","colors","HnComment","divRef","expandSelf","scrollIfDesired","dims","current","offsetTop","window","scrollTo","behavior","top","kidsObj","isValidComment","commentText","text","childrenToShow","className","dangerouslySetInnerHTML","__html","length","newIsOpen","borderColor","classNames","collapsed","onClick","e","handleCardClick","style","paddingLeft","max","marginLeft","borderLeftColor","borderLeftWidth","borderRight","paddingRight","fontWeight","by","time","stopPropagation","target","tagName","gutterRatio","pageX","offsetLeft","innerWidth","deleted","HnListSource","HnStoryPage","data","collapsedComments","anchorClickHandler","bind","storyData","storyLinkEl","title","href","comments","document","overflowWrap","score","handleCollapseEvent","newIds","cloneDeep","remove","sessionStorage","concat","updateDataFromDataLayer","body","addEventListener","strCollapsedIds","onVisitMarker","removeEventListener","link","history","push","preventDefault","getStoryData","dataLayer","DataLayer","allItems","currentLists","isLoadingFresh","isLoadingNewData","activeList","processDataFromLocalStorage","find","getStoryFromServer","updateIsLoadingStatus","fetch","response","ok","error","json","newItems","itemRemoved","newData","before","after","itemsToCheck","strIds","collapseHash","Set","shift","has","delete","newCollapse","Array","from","page","source","day","Day","week","Week","month","Month","front","Front","idsToLoad","loadData","dataOut","stories","sortBy","updateNewItems","allLists","list","items","provideNewItems","loadFreshSource","listType","newList","newDataList","listToUpdate","newAllItems","storiesToReturn","newStory","existingStoryIndex","existingStory","lastUpdated","Header","Navbar","Brand","NavLink","to","Nav","NavItem","eventKey","Form","pullRight","isLoading","size","Button","bsStyle","requestNewData","Glyphicon","glyph","PureComponent","HnListItem","story","commentCount","Link","descendants","isRead","HnStoryList","action","scrollPos","isNaN","scrollY","readIds","_App","readIdList","storyKey","updateActiveDataStore","newItemsProvided","params","localforage","readItems","isActive","uniqBy","location","pathname","indexOf","split","clearItemData","Switch","path","exact","render","saveIdToReadList","getPageData","newReadList","App","withRouter","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","smoothscroll","polyfill","onerror","msg","lineNo","columnNo","clear","innerHTML","ReactDOM","BrowserRouter","Route","getElementById","URL","process","origin","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2UAgBaA,EAAb,kDAIE,WAAYC,GAA6C,IAAD,8BACtD,cAAMA,IACDC,MAAQ,CACXC,UAAMC,GAH8C,EAJ1D,qDAWI,OAAO,OAXX,mLAeiCC,IAAYC,QACvCC,KAAKN,MAAMO,aAhBjB,eAmB2BJ,KAJjBK,EAfV,SAmB2D,OAAnBA,EAnBxC,uBAoBMF,KAAKG,SAAS,CAAEP,UAAMC,IAAa,kBACjC,EAAKH,MAAMU,mBAAcP,MArBjC,6BA2B2B,OAAnBK,EA3BR,wBA4BMJ,IAAYO,WAAWL,KAAKN,MAAMO,aAClCD,KAAKG,SAAS,CAAEP,UAAMC,IAAa,kBACjC,EAAKH,MAAMU,mBAAcP,MA9BjC,2BAmCUS,EAAMC,KAAKC,MAAMN,GACvBF,KAAKG,SAAS,CAAEP,KAAMU,IAAO,kBAAM,EAAKZ,MAAMU,cAAcE,MApChE,gJAuCIG,EACAC,GACC,IAAD,OAEA,IAAKC,IAAEC,QAAQH,EAAUI,WAAYb,KAAKN,MAAMmB,YAAa,CAE3D,QAA8BhB,IAA1BG,KAAKN,MAAMmB,WACb,OAGF,GAAIF,IAAEC,QAAQZ,KAAKL,MAAMC,KAAMI,KAAKN,MAAMmB,YAGxC,OAEFC,QAAQC,IAAI,YAAaf,KAAKN,MAAMmB,YAEpC,IAAMG,EAAaT,KAAKU,UAAUjB,KAAKN,MAAMmB,YAE7Cf,IAAYoB,QAAQlB,KAAKN,MAAMO,YAAae,GAC5ChB,KAAKG,SAAS,CAAEP,KAAMI,KAAKN,MAAMmB,aAAc,WAC7CC,QAAQC,IAAI,+BACZ,EAAKrB,MAAMU,cAAc,EAAKV,MAAMmB,oBA7D5C,GAAoDM,IAAMC,WChBnD,SAASC,EAAUC,GACxB,QAAYzB,IAARyB,EACF,MAAO,GAET,IAAIC,EAAUD,EAAIE,MAAM,wCAExB,OADaD,GAAWA,EAAQ,G,oBCcrBE,EAAb,kDAEE,WAAY/B,GAA4B,IAAD,8BACrC,cAAMA,IAFRgC,UAA+C,GAG7ChC,EAAMiC,cAAcC,SAAQ,SAAChC,GACd,OAATA,IAGJ,EAAK8B,UAAU9B,EAAKiC,IAAMV,IAAMW,gBANG,EAFzC,qDAWY,IAAD,OACDC,EAAgB/B,KAAKN,MAAMiC,cAAcK,QAC7C,SAACC,GAAD,OAAmB,OAATA,KAEZ,OACE,kBAAC,IAAMC,SAAP,KACGH,EAAcI,KAAI,SAACC,EAAWC,GAAZ,OACjB,kBAAC,EAAD,CACEC,IAAKF,EAAWP,GAChBU,QAASH,EACTI,MAAO,EAAK9C,MAAM8C,MAClBC,UAAW,EAAK/C,MAAM+C,UACtBC,IAAK,EAAKhB,UAAUU,EAAWP,IAC/Bc,aAAc,SAACd,EAAIe,EAASC,GAAd,aACZ,EAAKnD,MAAMiD,aACTd,EACAe,EAFF,OAGEC,QAHF,IAGEA,IACGD,EAAO,OAAGR,QAAH,IAAGA,OAAH,EAAGA,EAAWP,GAAd,UAAmBE,EAAcM,EAAQ,UAAzC,aAAmB,EAA0BR,KAG3DiB,SAEI,EAAKpD,MAAMqD,aAAaC,WACtB,SAACC,GAAD,OAAqB,OAAdb,GAAsBa,IAAMb,EAAUP,OAC1C,GAGTkB,aAAc,EAAKrD,MAAMqD,aACzBG,aAAc,EAAKxD,MAAMwD,uBAxCrC,GAAmC/B,IAAMC,WCnBlC,SAAS+B,EAAUC,GACxB,IAAIC,EAAUC,KAAKC,OAAM,IAAIC,MAAOC,UAAY,IAAOL,GACnDM,EAAWJ,KAAKC,MAAMF,EAAU,SACpC,OAAIK,EAAW,EACNA,EAAW,UAEpBA,EAAWJ,KAAKC,MAAMF,EAAU,SACjB,EACNK,EAAW,WAEpBA,EAAWJ,KAAKC,MAAMF,EAAU,QACjB,EACNK,EAAW,SAEpBA,EAAWJ,KAAKC,MAAMF,EAAU,QAChB,EACPK,EAAW,SAAWA,EAAW,EAAI,IAAM,KAEpDA,EAAWJ,KAAKC,MAAMF,EAAU,KACjB,EACNK,EAAW,WAEbJ,KAAKC,MAAMF,GAAW,WCI/B,IAAMM,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,WAGWC,EAAb,kDAmCE,WAAYlE,GAAwB,IAAD,8BACjC,cAAMA,IAnCRmE,YAkCmC,EAGjC,EAAKlE,MAAQ,CACXmE,YAAY,GAGd,EAAKD,OAAS1C,IAAMW,YAPa,EAnCrC,gEAII9B,KAAK+D,oBAJT,2CAQI/D,KAAK+D,oBART,wCAWqB,IAAD,EAEhB,GADAjD,QAAQC,IAAI,gBAAiBf,KAAKN,MAAMwD,cACpClD,KAAKN,MAAMwD,gBAAX,UAA4BlD,KAAKN,MAAM6C,eAAvC,aAA4B,EAAoBV,IAAI,CAAC,IAAD,EAChDmC,EAAI,UAAGhE,KAAK6D,OAAOI,eAAf,aAAG,EAAqBC,UAClCpD,QAAQC,IAAI,kBAAmBiD,QAElBnE,IAATmE,GACFG,OAAOC,SAAS,CAAEC,SAAU,SAAUC,IAAKN,EAAO,SAlB1D,gDAwBItE,EACAC,GAGA,OAAKD,EAAM+C,UAIJ,KAHE,CAAEqB,YAAY,OA7B3B,iDA8CI,OAAO9D,KAAK6D,OAAOI,UA9CvB,+BAiDY,IAAD,OACPnD,QAAQC,IAAI,SAAUf,KAAKN,MAAMoD,QACjC,IAAMP,EAAUvC,KAAKN,MAAM6C,QAE3B,GAAgB,OAAZA,EACF,OAAO,KAGT,IAAMZ,GAAiBY,EAAQgC,SAAW,IAAIvC,OAAOwC,GAC/CC,EAAclC,EAAQmC,MAAQ,GAEpC,IAAKF,EAAejC,GAElB,OAAO,KAKT,IAAMoC,EAAkB3E,KAAKN,MAAMoD,OACjC,kBAAC,IAAMZ,SAAP,KACE,uBACE0C,UAAU,UACVC,wBAAyB,CAAEC,OAAQL,KAGpC9C,EAAcoD,OAAS,GACtB,kBAAC,EAAD,CACEpD,cAAeA,EACfc,UAAWzC,KAAKN,MAAM+C,YAAczC,KAAKL,MAAMmE,WAC/CtB,MAAOxC,KAAKN,MAAM8C,MAAQ,EAC1BG,aAAc,SAACd,EAAImD,EAAWnC,GAAhB,OACZ,EAAKnD,MAAMiD,aAAad,EAAImD,EAAWnC,IAEzCE,aAAc/C,KAAKN,MAAMqD,aACzBG,aAAclD,KAAKN,MAAMwD,gBAhBW,KAsBtC+B,EACJjF,KAAKN,MAAM8C,MAAQmB,EAAOoB,OAASpB,EAAO3D,KAAKN,MAAM8C,OAAS,OAChE,OACE,yBACEoC,UAAWM,IAAW,WAAY,CAAEC,WAAYnF,KAAKN,MAAMoD,SAC3DsC,QAAS,SAACC,GAAD,OAAO,EAAKC,gBAAgBD,IACrCE,MAAO,CACLC,YAAa,GAAKlC,KAAKmC,IAAI,EAAIzF,KAAKN,MAAM8C,OAC1CkD,WACE1F,KAAKL,MAAMmE,YAAc9D,KAAKN,MAAMoD,QAC/B,GAAK9C,KAAKN,MAAM8C,MACjB,EAENmD,gBAAiBV,EAEjBW,gBAAiB5F,KAAKL,MAAMmE,WAAa,OAAIjE,EAE7CgG,YAAa7F,KAAKL,MAAMmE,WACpB,YAAcmB,OACdpF,EACJiG,aAAc9F,KAAKL,MAAMmE,WAAa,OAAIjE,IAG5C,uBACE0F,MAAO,CAAEQ,WAAY/F,KAAKN,MAAMoD,OAAS,IAAM,KAC/CJ,IAAK1C,KAAK6D,QAETtB,EAAQyD,GACR,MAEA7C,EAAUZ,EAAQ0D,MAClB,QAGFtB,KA3HT,sCA+HkBU,GAMd,GAHAA,EAAEa,kBAGgC,MAA7Bb,EAAEc,OAAeC,QAAtB,CAIA,IAAMD,EAASd,EAAEc,OAGXE,EAAcrG,KAAKL,MAAMmE,WAAa,IAAO,GAEnD,GACE9D,KAAKN,MAAM8C,MAAQ,GACnBxC,KAAKN,MAAM+C,YACV4C,EAAEiB,MAAQH,EAAOI,YAAcpC,OAAOqC,WAAaH,EAEpDrG,KAAKG,SAAS,CAAE2D,YAAa9D,KAAKL,MAAMmE,iBACnC,CACL,IAAMhB,GAAU9C,KAAKN,MAAMoD,OAE3B,GAA2B,OAAvB9C,KAAKN,MAAM6C,QACb,OAGFvC,KAAKN,MAAMiD,aAAa3C,KAAKN,MAAM6C,QAAQV,GAAIiB,OAAQjD,SA3J7D,GAA+BsB,IAAMC,WAgK9B,SAASoD,EAAejC,GAC7B,OAAgB,OAAZA,KAIFA,EAAQkE,eACa5G,IAApB0C,EAAQgC,SAAqD,IAA5BhC,EAAQgC,QAASQ,SChLhD,ICwKK2B,EDvKCC,EAAb,kDAIE,WAAYjH,GAA0B,IAAD,8BACnC,cAAMA,IAEDC,MAAQ,CACXiH,UAAM/G,EACNgH,kBAAmB,GACnB3D,kBAAcrD,GAGhB,EAAKiH,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBATS,EAJvC,qDAgBY,IAAD,OACP,QAAwBlH,IAApBG,KAAKL,MAAMiH,KACb,OAAO,KAGT9F,QAAQC,IAAI,eAAgBf,KAAKL,MAAMuD,cAEvC,IAAM8D,EAAYhH,KAAKL,MAAMiH,KAEvBK,OACcpH,IAAlBmH,EAAU1F,IACR,8BAAO0F,EAAUE,OAEjB,uBAAGC,KAAMH,EAAU1F,KAAM0F,EAAUE,OAGjCE,GAAYJ,EAAUzC,SAAW,IAAIvC,OAAOwC,GAIlD,OAFA6C,SAASH,MAAT,cAAwBF,EAAUE,OAGhC,6BACE,wBAAI3B,MAAO,CAAE+B,aAAc,eAAiBL,GAC5C,4BACE,8BAAOD,EAAUhB,IACjB,8BAAO,OACP,8BACGgB,EAAUO,MACV,WAEH,8BAAO,OACP,8BAAOpE,EAAU6D,EAAUf,MAA3B,QACA,8BAAO,OACP,8BAAO5E,EAAU2F,EAAU1F,YAETzB,IAAnBmH,EAAUtC,MACT,uBACEE,UAAU,WACVC,wBAAyB,CAAEC,OAAQkC,EAAUtC,QAIjD,kBAAC,EAAD,CACE/C,cAAeyF,EACf3E,WAAW,EACXD,MAAO,EACPO,aAAc/C,KAAKL,MAAMkH,kBACzBlE,aAAc,SAACd,EAAIe,EAASC,GAAd,OACZ,EAAK2E,oBAAoB3F,EAAIe,EAASC,IAExCK,aAAclD,KAAKL,MAAMuD,kBAlEnC,0CAwEIrB,EACAe,EACAC,GAIA,GAAID,EAAS,CAEX,IAAM6E,EAAS9G,IAAE+G,UAAU1H,KAAKL,MAAMkH,mBACtClG,IAAEgH,OAAOF,GAAQ,SAACxE,GAAD,OAAOA,IAAMpB,KAE9B+F,eAAe1G,QApFY,oBAoFeX,KAAKU,UAAUwG,IACzDzH,KAAKG,SAAS,CAAE0G,kBAAmBY,QAC9B,CACL,IAAMA,EAASzH,KAAKL,MAAMkH,kBAAkBgB,OAAOhG,GAEnD+F,eAAe1G,QAzFY,oBAyFeX,KAAKU,UAAUwG,IACzDzH,KAAKG,SAAS,CAAE0G,kBAAmBY,SAGpB5H,IAAbgD,GACF7C,KAAKG,SAAS,CAAE+C,aAAcL,MA7FpC,0CAkGIsB,OAAOC,SAAS,CAAEE,IAAK,IAGvBtE,KAAK8H,0BACLT,SAASU,KAAKC,iBAAiB,QAAShI,KAAK8G,oBAE7C,IAAMmB,EAAkBL,eAAe7H,QAzGV,qBA4G7B,GAAwB,OAApBkI,EAA0B,CAC5B,IAAMlF,EAAexC,KAAKC,MAAMyH,GAEhCjI,KAAKG,SAAS,CAAE0G,kBAAmB9D,IAKrC/C,KAAKN,MAAMwI,cAAclI,KAAKN,MAAMmC,MAnHxC,6CAuHIwF,SAASU,KAAKI,oBAAoB,QAASnI,KAAK8G,sBAvHpD,yCAyHqBzB,GACjB,GAAyB,MAArBA,EAAEc,OAAOC,QAAb,CAMA,IAAMgC,EAAO/C,EAAEc,OAGT5E,EAAU6G,EAAKjB,KAAK3F,MADZ,qDAGd,GAAgB,OAAZD,EASJ,OAHAvB,KAAKN,MAAM2I,QAAQC,KAAK,UAAY/G,EAAQ,IAE5C8D,EAAEkD,kBACK,EARLH,EAAKjC,OAAS,YAtIpB,gLAkJ4BnG,KAAKwI,aAAaxI,KAAKN,MAAMmC,IAlJzD,OAkJUmF,EAlJV,OAoJIhH,KAAKG,SAAS,CAAEyG,KAAMI,IApJ1B,+IAuJqBvG,GAEW,OAAxBA,EAAUgI,WAA+C,OAAzBzI,KAAKN,MAAM+I,WAC7CzI,KAAK8H,4BA1JX,4EA8J6BjG,GA9J7B,oEA+JoC,OAAzB7B,KAAKN,MAAM+I,UA/JtB,0BAgKQ5I,EAhKR,sCAiKcG,KAAKN,MAAM+I,UAAUD,aAAa3G,GAjKhD,qKAAiCV,IAAMC,WEE1BsH,EAAb,kDAEE,WAAYhJ,GAAwB,IAAD,8BACjC,cAAMA,IAEDC,MAAQ,CACXgJ,SAAU,GACVC,aAAc,GACdC,gBAAgB,EAChBC,kBAAkB,GAPa,EAFrC,wDACcC,QADd,8CAaY,IAAD,OAEP,OACE,kBAAC,IAAM7G,SAAP,KACE,kBAAC,EAAD,CACE9B,cAAe,SAACuI,GAAD,OACb,EAAKK,4BAA4BL,EAAU,EAAKhJ,MAAMiJ,eAExD/H,WAAYb,KAAKL,MAAMgJ,SACvB1I,YAAY,iBAGd,kBAAC,EAAD,CACEG,cAAe,SAACwI,GAAD,OACb,EAAKI,4BAA4B,EAAKrJ,MAAMgJ,SAAUC,IAExD/H,WAAYb,KAAKL,MAAMiJ,aACvB3I,YAAY,qBA9BtB,4EAoCqB4B,GApCrB,+EAsCiBhC,KADTD,EAAOI,KAAKL,MAAMgJ,SAASM,MAAK,SAAChG,GAAD,OAAOA,EAAEpB,KAAOA,MArCxD,yCAuCajC,GAvCb,uBA2CiBI,KAAKkJ,mBAAmBrH,GA3CzC,iOA8CkCA,GA9ClC,oFA+CQP,EAAM,cAAgBO,EAE1B7B,KAAKN,MAAMyJ,uBAAsB,GAjDrC,SAkD2BC,MAAM9H,GAlDjC,WAkDU+H,EAlDV,QAmDkBC,GAnDlB,uBAoDMxI,QAAQyI,MAAMF,GApDpB,uBAqDaxJ,GArDb,wBAuDmDwJ,EAASG,OAvD5D,aAyDQ,UAFE5C,EAvDV,iCA0DM9F,QAAQyI,MAAM3C,GACd5G,KAAKN,MAAMyJ,uBAAsB,GA3DvC,uBA4DatJ,GA5Db,eA+DIiB,QAAQC,IAAI,sBAAuB6F,GAEnC5G,KAAKN,MAAMyJ,uBAAsB,GAG3BM,EAAWzJ,KAAKL,MAAMgJ,SAASd,OAAOjB,GAC5C5G,KAAKG,SAAS,CAAEwI,SAAUc,IArE9B,kBAsEW7C,GAtEX,4IAyEgB/E,GACZ,IAAM6H,EAAc1J,KAAKL,MAAMgJ,SAASM,MAAK,SAAChG,GAAD,OAAOA,EAAEpB,KAAOA,KAEvD8H,EAAU3J,KAAKL,MAAMgJ,SAAS3G,QAAO,SAACiB,GAAD,OAAOA,EAAEpB,KAAOA,KAC3Df,QAAQC,IAAI,aAAc,CACxB6I,OAAQ5J,KAAKL,MAAMgJ,SAAS5D,OAC5B8E,MAAOF,EAAQ5E,cAIGlF,IAAhB6J,GAA4B,WAG9B,IAAMI,EAAsC,CAACJ,GAEvCK,EAASnC,eAAe7H,QF3FH,qBE6F3B,GAAe,OAAXgK,EAAiB,CAKnB,IAJA,IAAMhH,EAAexC,KAAKC,MAAMuJ,GAE1BC,EAAe,IAAIC,IAAIlH,GAEtB+G,EAAa/E,QAAQ,CAAC,IAAD,EACpBnF,EAAOkK,EAAaI,aAEbrK,IAATD,IAKAoK,EAAaG,IAAIvK,EAAKiC,KACxBmI,EAAaI,OAAOxK,EAAKiC,IAG3B,UAAAjC,EAAK2E,eAAL,SACIvC,QAAO,SAACiB,GAAD,OAAa,OAANA,KACfrB,SAAQ,SAACqB,GAAD,OAAO6G,EAAaxB,KAAKrF,OAGtC,IAAMoH,EAAcC,MAAMC,KAAKP,GAE/BlJ,QAAQC,IAAI,eAAgBgC,EAAcsH,GAE1CzC,eAAe1G,QFvHU,oBEuHiBX,KAAKU,UAAUoJ,KAjC7B,GAqChCrK,KAAKG,SAAS,CAAEwI,SAAUgB,MAxH9B,kCA2Hca,GAA2B,IAAD,OAGpC1J,QAAQC,IAAI,cAAeyJ,EAAMxK,KAAKL,OAEzB,KAAT6K,QAAwB3K,IAAT2K,IACjBA,EAAO,SAGT,IAOMC,EAPuD,CAC3DC,IAAKhE,EAAaiE,IAClBC,KAAMlE,EAAamE,KACnBC,MAAOpE,EAAaqE,MACpBC,MAAOtE,EAAauE,OAGaT,GAEnC,QAAe3K,IAAX4K,EAEF,OADA3J,QAAQyI,MAAM,8BACP,GAGT,IAAM2B,EAAYlL,KAAKL,MAAMiJ,aAAaK,MAAK,SAAChG,GAAD,OAAOA,EAAEX,MAAQmI,KAEhE,QAAkB5K,IAAdqL,EAIF,OAFApK,QAAQC,IAAI,qBACZf,KAAKmL,SAASV,GACP,GAGT,IAAIW,EAAUF,EAAUG,QACrBlJ,KAAI,SAACN,GAAD,OAAQ,EAAKlC,MAAMgJ,SAASM,MAAK,SAAChG,GAAD,OAAOA,EAAEpB,KAAOA,QACrDG,QAAO,SAACiB,GAAD,YAAapD,IAANoD,KAMjB,OAJIwH,IAAW/D,EAAauE,QAC1BG,EAAUzK,IAAE2K,OAAOF,GAAS,SAACnI,GAAD,OAAQA,EAAEsE,UAGjC6D,IAnKX,wEAsKwBrC,GAtKxB,2EAuKIjI,QAAQC,IAAI,gBACRO,EAAM,GAxKd,KAyKYyH,EAzKZ,cA0KWrC,EAAauE,MA1KxB,SA6KWvE,EAAaiE,IA7KxB,SAgLWjE,EAAamE,KAhLxB,SAmLWnE,EAAaqE,MAnLxB,0BA2KQzJ,EAAM,yBA3Kd,mCA8KQA,EAAM,kBA9Kd,mCAiLQA,EAAM,mBAjLd,oCAoLQA,EAAM,oBApLd,iCAwLQtB,KAAKL,MAAMmJ,iBAxLnB,wBAyLMhI,QAAQC,IAAI,mCAzLlB,kCA6LIf,KAAKN,MAAMyJ,uBAAsB,GACjCnJ,KAAKG,SAAS,CAAE2I,kBAAkB,IA9LtC,UA+L2BM,MAAM9H,GA/LjC,YA+LU+H,EA/LV,QAgMkBC,GAhMlB,wBAiMMxI,QAAQyI,MAAMF,GACdrJ,KAAKN,MAAMyJ,uBAAsB,GACjCnJ,KAAKG,SAAS,CAAE2I,kBAAkB,IAnMxC,4CAsM+BO,EAASG,OAtMxC,QAsMQ5C,EAtMR,OAwMQmC,IAAerC,EAAauE,QAE9BrE,EAAOjG,IAAE2K,OAAe1E,GAAM,SAAC3D,GAAD,OAAQA,EAAEsE,UAQ1CzG,QAAQC,IAAI,uBAAwB6F,GAEpC5G,KAAKN,MAAMyJ,uBAAsB,GACjCnJ,KAAKG,SAAS,CAAE2I,kBAAkB,IAClC9I,KAAKuL,eAAe3E,EAAMmC,GAtN9B,0JA0NIJ,EACA6C,GACC,IAAD,OAIA1K,QAAQC,IAAI,gCAAiC4H,EAAU6C,QAGtC3L,IAAb8I,GACF3I,KAAKG,SAAS,CAAEwI,kBAGD9I,IAAb2L,GACFxL,KAAKG,SAAS,CAAEyI,aAAc4C,SAGf3L,IAAb8I,QAAuC9I,IAAb2L,EAc9BA,EAAS5J,SAAQ,SAAC6J,GAChB,IAAMC,EAAQD,EAAKJ,QAChBlJ,KAAI,SAACN,GAAD,OAAQ8G,EAASM,MAAK,SAAChG,GAAD,OAAOA,EAAEpB,KAAOA,QAC1CG,QAAO,SAACiB,GAAD,YAAapD,IAANoD,KAEjB,EAAKvD,MAAMiM,gBAAgBD,EAAOD,EAAKnJ,QAlBlCtC,KAAKL,MAAMkJ,iBACd/H,QAAQC,IACN,kEACAf,KAAKN,MAAMkM,iBAEb5L,KAAKG,SAAS,CAAE0I,gBAAgB,IAChC7I,KAAKmL,SAASnL,KAAKN,MAAMkM,oBAlPjC,qCAoQiBhF,EAA4BiF,GAA+B,IAAD,OACvE/K,QAAQC,IAAI,2BAA4B6F,EAAMiF,QAEjChM,IAAT+G,IACFA,EAAO,IAIT,IAAMkF,EAAUlF,EAAKzE,KAAI,SAACc,GAAD,OAAOA,EAAEpB,MAE5BkK,EAAcpL,IAAE+G,UAAU1H,KAAKL,MAAMiJ,cAEvCoD,EAAeD,EAAY9C,MAAK,SAAChG,GAAD,OAAOA,EAAEX,MAAQuJ,UAEhChM,IAAjBmM,EACFD,EAAYzD,KAAK,CACfhG,IAAKuJ,EACLR,QAASS,IAGXE,EAAaX,QAAUS,EAKzB,IAAMG,EAActL,IAAE+G,UAAU1H,KAAKL,MAAMgJ,UAErCuD,EAA4B,GAElCtF,EAAKhF,SAAQ,SAACuK,GACZ,IAAMC,EAAqBH,EAAYjJ,WACrC,SAACC,GAAD,OAAOA,EAAEpB,KAAOsK,EAAStK,MAI3B,IAA4B,IAAxBuK,EAGF,OAFAH,EAAY3D,KAAK6D,QACjBD,EAAgB5D,KAAK6D,GAKvB,IAAME,EAAgBJ,EAAYG,GAC9BC,EAAcC,YAAcH,EAASG,YACvCJ,EAAgB5D,KAAK+D,IAIvBJ,EAAYG,GAAsBD,EAClCD,EAAgB5D,KAAK6D,OAOvBnM,KAAKG,SAAS,CAAEwI,SAAUsD,EAAarD,aAAcmD,IAAe,WAClE,EAAKrM,MAAMiM,gBAAgBO,EAAiBL,UA7TlD,GAA+B1K,IAAMC,W,sECjBxBmL,EAAb,uKACY,IAAD,OACP,OACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAOD,OAAR,KACE,kBAACC,EAAA,EAAOC,MAAR,KACE,kBAACC,EAAA,EAAD,CAASC,GAAG,KAAZ,gBAGJ,kBAACC,EAAA,EAAD,KACE,kBAAC,gBAAD,CAAeD,GAAG,QAChB,kBAACE,EAAA,EAAD,CAASC,SAAU,GAAnB,QAGF,kBAAC,gBAAD,CAAeH,GAAG,SAChB,kBAACE,EAAA,EAAD,CAASC,SAAU,GAAnB,SAGF,kBAAC,gBAAD,CAAeH,GAAG,UAChB,kBAACE,EAAA,EAAD,CAASC,SAAU,GAAnB,WAIJ,kBAACN,EAAA,EAAOO,KAAR,CAAaC,WAAS,GACnBhN,KAAKN,MAAMuN,WAAa,kBAAC,IAAD,CAASC,KAAM,MACtClN,KAAKN,MAAMuN,WACX,kBAACE,EAAA,EAAD,CACEC,QAAQ,UACRhI,QAAS,kBAAM,EAAK1F,MAAM2N,mBAE1B,kBAACC,EAAA,EAAD,CAAWC,MAAM,mBA9B/B,GAA4BpM,IAAMqM,e,QCGrBC,EAAb,uKAEI,IAAMC,EAAQ1N,KAAKN,MAAMkH,KAEnB+G,EACJ,kBAAC,IAAMzL,SAAP,KACG,MACD,kBAAC0L,EAAA,EAAD,CAAMjB,GAAI,UAAYe,EAAM7L,IAC1B,kBAACyL,EAAA,EAAD,CAAWC,MAAM,YADnB,IACiCG,EAAMG,cAKrC5G,OACUpH,IAAd6N,EAAMpM,IACJ,kBAACsM,EAAA,EAAD,CAAMjB,GAAI,UAAYe,EAAM7L,IAAK6L,EAAMxG,OAEvC,uBAAGC,KAAMuG,EAAMpM,IAAK6E,OAAO,UACxBuH,EAAMxG,OAIb,OACE,yBAAKtC,UAAWM,IAAW,CAAE4I,OAAQ9N,KAAKN,MAAMoO,UAC9C,2BAAI7G,GACJ,2BACE,8BACE,kBAACqG,EAAA,EAAD,CAAWC,MAAM,eADnB,IACoC,IAAMG,EAAMnG,YAEzB1H,IAAtB6N,EAAMG,aAA6BF,EACpC,8BAAO,MAAQxK,EAAUuK,EAAMzH,MAAQ,QACvC,8BAAO,MAAQ5E,EAAUqM,EAAMpM,YA/BzC,GAAgCH,IAAMC,WCHzB2M,EAAb,kDACE,WAAYrO,GAA0B,IAAD,8BACnC,cAAMA,IACDC,MAAQ,CACX+L,MAAO,IAH0B,EADvC,gEAUI,IAAMrD,EAAWrI,KAAKN,MAAc2I,QAGpC,GAFAvH,QAAQC,IAAI,mBAAoBsH,GAET,QAAnBA,EAAQ2F,OAAkB,CAE5B,IAAMC,GAAarG,eAAe7H,QAhBjB,eAkBZmO,MAAMD,KACTnN,QAAQC,IAAI,kBAAmBkN,GAC/B9J,OAAOC,SAAS,CAAEE,IAAK2J,QAnB/B,6CAyBInN,QAAQC,IAAI,kBAAmBoD,OAAOgK,SAEtCvG,eAAe1G,QA5BI,cA4BoB,GAAKiD,OAAOgK,WA3BvD,+BA8BY,IAAD,OAEP,OADA9G,SAASH,MAAT,cAEE,6BACGlH,KAAKN,MAAMgM,MACT1J,QAAO,SAAC0L,GAAD,YAAiC7N,IAAtB6N,EAAMG,eACxB1L,KAAI,SAACvC,GAAD,OACH,kBAAC,EAAD,CACEgH,KAAMhH,EACN0C,IAAK1C,EAAKiC,GACViM,OAAQ,EAAKpO,MAAM0O,QAAQxO,EAAKiC,cAxC9C,GAAiCV,IAAMC,WJKjCiN,E,kDA4BJ,WAAY3O,GAAsB,IAAD,8BAC/B,cAAMA,IA5BR+I,eA2BiC,EAG/B,EAAK9I,MAAQ,CACX+L,MAAO,GACP/C,SAAU,GACVI,WAAYrC,EAAauE,MACzB1B,WAAO1J,EACPoN,WAAW,EACXqB,WAAY,GACZC,SAAU,GAGZ,EAAK9F,UAAYtH,IAAMW,YAEvB,EAAK0M,sBAAwB,EAAKA,sBAAsBzH,KAA3B,gBAC7B,EAAK0H,iBAAmB,EAAKA,iBAAiB1H,KAAtB,gBAhBO,E,0EAzBDrH,EAAqBC,GACnD,IAAIkM,EACJ,OAAQnM,EAAM8B,MAAMkN,OAAOlE,MACzB,IAAK,MACHqB,EAAWnF,EAAaiE,IACxB,MAEF,IAAK,OACHkB,EAAWnF,EAAamE,KACxB,MAEF,IAAK,QACHgB,EAAWnF,EAAaqE,MACxB,MAEF,QACEc,EAAWnF,EAAauE,MAM5B,OAFAnK,QAAQC,IAAI,gBAAiBrB,EAAM8B,MAAMkN,OAAOlE,KAAMqB,GAE/C,2BAAKlM,GAAZ,IAAmBoJ,WAAY8C,Q,yLAyBP8C,IAAY5O,QAnDb,sB,OAqDL,QAFZ6O,E,SAGJ5O,KAAKG,SAAS,CAAEmO,WAAYM,I,kJAIVlD,EAAiBmD,GACjCA,GACF7O,KAAKG,SAAS,CAAEuL,UAKlB1L,KAAKG,UAAS,SAACO,GACb,IAAIiI,EAAWhI,IAAE+G,UAAUhH,EAAUiI,UAAUd,OAAO6D,GAGtD,OAFA/C,EAAWhI,IAAEmO,OAAOnG,GAAU,SAAC1F,GAAD,OAAOA,EAAEpB,MACvCf,QAAQC,IAAI,gBAAiB4H,GACtB,CAAEA,iB,+BAIH,IAAD,OAGP,OAFA7H,QAAQC,IAAI,eAAgBf,KAAKL,MAAOK,KAAKyI,gBAEpB5I,IAArBG,KAAKL,MAAM4J,MAEX,6BACE,kEACA,gGAQJ,6BACE,kBAAC,EAAD,CACE7G,IAAK1C,KAAKyI,UACVkD,gBAAiB3L,KAAKyO,iBACtBtF,sBAAuB,SAAC8D,GAAD,OAAe,EAAK9M,SAAS,CAAE8M,eACtDrB,gBAAiB5L,KAAKL,MAAMoJ,aAG9B,kBAAC,EAAD,CACEsE,eAAgB,WAId,GAFE,EAAK3N,MAAMqP,SAASC,SAASC,QAAQ,UAAY,EAElC,CAEf,IAAMpN,GAAM,EAAKnC,MAAMqP,SAASC,SAASE,MAAM,KAAK,GAOpD,OALApO,QAAQC,IAAI,mBACZ,EAAK0H,UAAUxE,QAASkL,cAActN,QACtC,EAAK1B,UAAS,SAACO,GACb,MAAO,CAAE6N,SAAU7N,EAAU6N,SAAW,MAKvC,EAAK5O,MAAMsN,WACd,EAAKxE,UAAUxE,QAASkH,SAAS,EAAKxL,MAAMoJ,aAGhDkE,UAAWjN,KAAKL,MAAMsN,YAGxB,kBAACmC,EAAA,EAAD,KACE,kBAAC,IAAD,CACEC,KAAM,aACNC,OAAK,EACLC,OAAQ,SAAC7P,GAAD,OACN,kBAAC,EAAD,CACEmC,IAAKnC,EAAM8B,MAAMkN,OAAO7M,GACxB4G,UAAW,EAAKA,UAAUxE,QAC1BoE,QAAS3I,EAAM2I,QACf/F,IAAK5C,EAAM8B,MAAMkN,OAAO7M,GAAK,IAAM,EAAKlC,MAAM4O,SAC9CrG,cAAe,SAACrG,GAAD,OAAQ,EAAK2N,iBAAiB3N,SAInD,kBAAC,IAAD,CACEwN,KAAK,UACLE,OAAQ,SAAC7P,GAAD,OACN,kBAAC,EAAD,eACEgM,MAC6B,OAA3B,EAAKjD,UAAUxE,QACX,GACA,EAAKwE,UAAUxE,QAAQwL,YACrB/P,EAAM8B,MAAMkN,OAAOlE,MAG3B4D,QAAS,EAAKzO,MAAM2O,YAChB5O,W,uCAQDmC,GACf,IAAM6N,EAAc/O,IAAE+G,UAAU1H,KAAKL,MAAM2O,YAC3CxN,QAAQC,IAAI,gBAAiB2O,GAGzBA,EAAY7N,KAIhB6N,EAAY7N,IAAM,EAElB8M,IAAYzN,QArKW,qBAqKiBwO,GACxC1P,KAAKG,SAAS,CAAEmO,WAAYoB,O,uCAGbhE,EAAiBG,GAC5BA,IAAa7L,KAAKL,MAAMoJ,YAC1B/I,KAAKG,SAAS,CAAEuL,c,GA1KHvK,IAAMC,WA+KZuO,EAAMC,YAAWvB,I,SAElB3H,O,iBAAAA,I,aAAAA,I,eAAAA,I,kBAAAA,M,KKrLZ,IAAMmJ,EAAcC,QACW,cAA7B3L,OAAO4K,SAASgB,UAEe,UAA7B5L,OAAO4K,SAASgB,UAEhB5L,OAAO4K,SAASgB,SAASvO,MACvB,2DA8CN,SAASwO,GAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9Q,QACfwQ,UAAUC,cAAcQ,YAI1B9P,QAAQC,IACN,gHAKEmP,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlBzP,QAAQC,IAAI,sCAGRmP,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAAxH,GACLzI,QAAQyI,MAAM,4CAA6CA,MCzFjEyH,IAAaC,WAEb9M,OAAO+M,QAAU,SAASC,EAAK7P,EAAK8P,EAAQC,EAAU9H,GAEpDzI,QAAQyI,MAAM,cAAe4H,GAC7BrR,IAAYwR,QAEZjK,SAASU,KAAKwJ,UACZ,6FAGJC,IAASjC,OACP,kBAACkC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOrC,KAAM,WACX,kBAAC,EAAD,QAGJhI,SAASsK,eAAe,SDLnB,SAAkBzB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIyB,IACnBC,GACD1N,OAAO4K,SAAS5H,MAEJ2K,SAAW3N,OAAO4K,SAAS+C,OAIvC,OAGF3N,OAAO6D,iBAAiB,QAAQ,WAC9B,IAAMiI,EAAK,UAAM4B,GAAN,sBAEPhC,IAgEV,SAAiCI,EAAeC,GAE9C9G,MAAM6G,GACHK,MAAK,SAAAjH,GAEJ,IAAM0I,EAAc1I,EAAS2I,QAAQC,IAAI,gBAEnB,MAApB5I,EAAS6I,QACO,MAAfH,IAA8D,IAAvCA,EAAY9C,QAAQ,cAG5CkB,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BnM,OAAO4K,SAASsD,eAKpBrC,GAAgBC,EAAOC,MAG1Ba,OAAM,WACLjQ,QAAQC,IACN,oEArFAuR,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCxP,QAAQC,IACN,gHAMJiP,GAAgBC,EAAOC,OCpB/BE,I","file":"static/js/main.65dd90d3.chunk.js","sourcesContent":["import localForage from \"localforage\";\nimport _ from \"lodash\";\n\nimport React from \"react\";\n\nexport interface LocalStorageWrapperProps<TDataType> {\n  storageName: string;\n  activeItem: TDataType;\n\n  dataDidUpdate(item: TDataType | undefined): void;\n}\n\nexport interface LocalStorageWrapperState<TDataType> {\n  item: TDataType | undefined;\n}\n\nexport class LocalStorageWrapper<TDataType> extends React.Component<\n  LocalStorageWrapperProps<TDataType>,\n  LocalStorageWrapperState<TDataType>\n> {\n  constructor(props: LocalStorageWrapperProps<TDataType>) {\n    super(props);\n    this.state = {\n      item: undefined\n    };\n  }\n  render() {\n    return null;\n  }\n  async componentDidMount() {\n    // check localStorage for obj\n    const itemCompressed = await localForage.getItem<string>(\n      this.props.storageName\n    );\n    // decompress\n    if (itemCompressed === undefined || itemCompressed === null) {\n      this.setState({ item: undefined }, () =>\n        this.props.dataDidUpdate(undefined)\n      );\n      return;\n    }\n\n    // seems to be some sort of corruption on load.. clear localStorage\n    if (itemCompressed === null) {\n      localForage.removeItem(this.props.storageName);\n      this.setState({ item: undefined }, () =>\n        this.props.dataDidUpdate(undefined)\n      );\n      return;\n    }\n    // parse JSON for what was found\n    const obj = JSON.parse(itemCompressed) as TDataType;\n    this.setState({ item: obj }, () => this.props.dataDidUpdate(obj));\n  }\n  componentDidUpdate(\n    prevProps: LocalStorageWrapperProps<TDataType>,\n    prevState: LocalStorageWrapperState<TDataType>\n  ) {\n    // if activeItem changed... save to local storage.. update self\n    if (!_.isEqual(prevProps.activeItem, this.props.activeItem)) {\n      // do a check for undefined and kick out?\n      if (this.props.activeItem === undefined) {\n        return;\n      }\n      // TODO: this save should only happen when the data is new\n      if (_.isEqual(this.state.item, this.props.activeItem)) {\n        // do not need to save or update... it is the same as current state\n        // happens when loaded\n        return;\n      }\n      console.log(\"save item\", this.props.activeItem);\n      // compress and save\n      const strToStore = JSON.stringify(this.props.activeItem);\n\n      localForage.setItem(this.props.storageName, strToStore);\n      this.setState({ item: this.props.activeItem }, () => {\n        console.log(\"updating data after a save?\");\n        this.props.dataDidUpdate(this.props.activeItem);\n      });\n    }\n  }\n}\n","export function getDomain(url: string | undefined) {\n  if (url === undefined) {\n    return \"\";\n  }\n  var matches = url.match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i);\n  var domain = matches && matches[1];\n  return domain;\n}\n","import React from \"react\";\n\nimport { HnComment } from \"./HnComment\";\n\ninterface HnCommentListProps {\n  childComments: Array<KidsObj3 | null>;\n  depth: number;\n  canExpand: boolean;\n\n  onUpdateOpen(\n    id: number,\n    newOpen: boolean,\n    scrollId: number | undefined\n  ): void;\n\n  collapsedIds: number[];\n  idToScrollTo: number | undefined;\n}\n\nexport class HnCommentList extends React.Component<HnCommentListProps, {}> {\n  childRefs: Array<React.RefObject<HnComment>> = [];\n  constructor(props: HnCommentListProps) {\n    super(props);\n    props.childComments.forEach((item) => {\n      if (item === null) {\n        return;\n      }\n      this.childRefs[item.id] = React.createRef();\n    });\n  }\n  render() {\n    const validChildren = this.props.childComments.filter(\n      (comm) => comm !== null\n    );\n    return (\n      <React.Fragment>\n        {validChildren.map((childComm, index) => (\n          <HnComment\n            key={childComm!.id}\n            comment={childComm}\n            depth={this.props.depth}\n            canExpand={this.props.canExpand}\n            ref={this.childRefs[childComm!.id]}\n            onUpdateOpen={(id, newOpen, scrollId) =>\n              this.props.onUpdateOpen(\n                id,\n                newOpen,\n                scrollId ??\n                  (newOpen ? childComm?.id : validChildren[index + 1]?.id)\n              )\n            }\n            isOpen={\n              !(\n                this.props.collapsedIds.findIndex(\n                  (c) => childComm !== null && c === childComm.id\n                ) >= 0\n              )\n            }\n            collapsedIds={this.props.collapsedIds}\n            idToScrollTo={this.props.idToScrollTo}\n          />\n        ))}\n      </React.Fragment>\n    );\n  }\n}\n","export function timeSince(date: number) {\n  var seconds = Math.floor(new Date().getTime() / 1000 - date);\n  var interval = Math.floor(seconds / 31536000);\n  if (interval > 1) {\n    return interval + \" years\";\n  }\n  interval = Math.floor(seconds / 2592000);\n  if (interval > 1) {\n    return interval + \" months\";\n  }\n  interval = Math.floor(seconds / 86400);\n  if (interval > 1) {\n    return interval + \" days\";\n  }\n  interval = Math.floor(seconds / 3600);\n  if (interval >= 1) {\n    return interval + \" hour\" + (interval > 1 ? \"s\" : \"\");\n  }\n  interval = Math.floor(seconds / 60);\n  if (interval > 1) {\n    return interval + \" minutes\";\n  }\n  return Math.floor(seconds) + \" seconds\";\n}\n","import classNames from \"classnames\";\nimport React from \"react\";\n\nimport { HnCommentList } from \"./HnCommentList\";\nimport { timeSince } from \"./timeSince\";\n\nexport interface HnCommentProps {\n  comment: KidsObj3 | null;\n  depth: number;\n\n  canExpand: boolean;\n\n  isOpen: boolean;\n  onUpdateOpen(\n    id: number,\n    newIsOpen: boolean,\n    scrollId: number | undefined\n  ): void;\n  collapsedIds: number[];\n  idToScrollTo: number | undefined;\n}\n\ninterface HnCommentState {\n  expandSelf: boolean;\n}\n\nconst colors = [\n  \"#bc8672\",\n  \"#c5be53\",\n  \"#d46850\",\n  \"#8c7f3b\",\n  \"#dec392\",\n  \"#c9893a\",\n];\n\nexport class HnComment extends React.Component<HnCommentProps, HnCommentState> {\n  divRef: React.RefObject<HTMLDivElement>;\n\n  componentDidMount() {\n    this.scrollIfDesired();\n  }\n\n  componentDidUpdate() {\n    this.scrollIfDesired();\n  }\n\n  scrollIfDesired() {\n    console.log(\"scroll to id \", this.props.idToScrollTo);\n    if (this.props.idToScrollTo === this.props.comment?.id) {\n      const dims = this.divRef.current?.offsetTop;\n      console.log(\"scrolling to me\", dims);\n\n      if (dims !== undefined) {\n        window.scrollTo({ behavior: \"smooth\", top: dims - 80 });\n      }\n    }\n  }\n\n  static getDerivedStateFromProps(\n    props: HnCommentProps,\n    state: HnCommentState\n  ) {\n    // if a parent expands, collapse this one\n    if (!props.canExpand) {\n      return { expandSelf: false };\n    }\n\n    return null;\n  }\n\n  constructor(props: HnCommentProps) {\n    super(props);\n\n    this.state = {\n      expandSelf: false,\n    };\n\n    this.divRef = React.createRef();\n  }\n\n  getDivRef() {\n    return this.divRef.current!;\n  }\n\n  render() {\n    console.log(\"isOpen\", this.props.isOpen);\n    const comment = this.props.comment;\n\n    if (comment === null) {\n      return null;\n    }\n\n    const childComments = (comment.kidsObj || []).filter(isValidComment);\n    const commentText = comment.text || \"\";\n\n    if (!isValidComment(comment)) {\n      // kick out nothing if the comment was deleted and has no children\n      return null;\n    }\n\n    // TODO: rewrite links to hn to open in this site instead\n\n    const childrenToShow = !this.props.isOpen ? null : (\n      <React.Fragment>\n        <p\n          className=\"comment\"\n          dangerouslySetInnerHTML={{ __html: commentText }}\n        />\n\n        {childComments.length > 0 && (\n          <HnCommentList\n            childComments={childComments}\n            canExpand={this.props.canExpand && !this.state.expandSelf}\n            depth={this.props.depth + 1}\n            onUpdateOpen={(id, newIsOpen, scrollId) =>\n              this.props.onUpdateOpen(id, newIsOpen, scrollId)\n            }\n            collapsedIds={this.props.collapsedIds}\n            idToScrollTo={this.props.idToScrollTo}\n          />\n        )}\n      </React.Fragment>\n    );\n\n    const borderColor =\n      this.props.depth < colors.length ? colors[this.props.depth] : \"#bbb\";\n    return (\n      <div\n        className={classNames(\"bp3-card\", { collapsed: !this.props.isOpen })}\n        onClick={(e) => this.handleCardClick(e)}\n        style={{\n          paddingLeft: 12 + Math.max(4 - this.props.depth),\n          marginLeft:\n            this.state.expandSelf && this.props.isOpen\n              ? -17 * this.props.depth\n              : 0,\n\n          borderLeftColor: borderColor,\n\n          borderLeftWidth: this.state.expandSelf ? 6 : undefined,\n\n          borderRight: this.state.expandSelf\n            ? \"1px solid\" + borderColor\n            : undefined,\n          paddingRight: this.state.expandSelf ? 6 : undefined,\n        }}\n      >\n        <p\n          style={{ fontWeight: this.props.isOpen ? 450 : 300 }}\n          ref={this.divRef}\n        >\n          {comment.by}\n          {\" | \"}\n\n          {timeSince(comment.time)}\n          {\" ago\"}\n        </p>\n\n        {childrenToShow}\n      </div>\n    );\n  }\n  handleCardClick(e: React.MouseEvent<HTMLDivElement>): void {\n    // this is to prevent other cards from collapsing too\n\n    e.stopPropagation();\n\n    // dont update state if click was A link\n    if ((e.target as any).tagName === \"A\") {\n      return;\n    }\n\n    const target = e.target as any;\n\n    // allow some gutter expansion once shifted over\n    const gutterRatio = this.state.expandSelf ? 0.85 : 0.9;\n\n    if (\n      this.props.depth > 0 &&\n      this.props.canExpand &&\n      (e.pageX + target.offsetLeft) / window.innerWidth > gutterRatio\n    ) {\n      this.setState({ expandSelf: !this.state.expandSelf });\n    } else {\n      const isOpen = !this.props.isOpen;\n\n      if (this.props.comment === null) {\n        return;\n      }\n\n      this.props.onUpdateOpen(this.props.comment.id, isOpen, undefined);\n    }\n  }\n}\n\nexport function isValidComment(comment: KidsObj3 | null) {\n  if (comment === null) {\n    return false;\n  }\n  const isBad =\n    comment.deleted &&\n    (comment.kidsObj === undefined || comment.kidsObj!.length === 0);\n\n  return !isBad;\n}\n","import { History } from \"history\";\nimport React from \"react\";\n\nimport { DataLayer } from \"./DataLayer\";\nimport { getDomain } from \"./getDomain\";\nimport { isValidComment } from \"./HnComment\";\nimport { HnCommentList } from \"./HnCommentList\";\nimport { timeSince } from \"./timeSince\";\nimport _ from \"lodash\";\n\ninterface HnStoryPageState {\n  data: HnItem | undefined;\n\n  collapsedComments: number[];\n  idToScrollTo: number | undefined;\n}\n\nexport interface HnStoryPageProps {\n  dataLayer: DataLayer | null;\n  id: number;\n  history: History;\n\n  onVisitMarker(id: number): void;\n}\n\nexport const SESSION_COLLAPSED = \"SESSION_COLLAPSED\";\nexport class HnStoryPage extends React.Component<\n  HnStoryPageProps,\n  HnStoryPageState\n> {\n  constructor(props: HnStoryPageProps) {\n    super(props);\n\n    this.state = {\n      data: undefined,\n      collapsedComments: [],\n      idToScrollTo: undefined,\n    };\n\n    this.anchorClickHandler = this.anchorClickHandler.bind(this);\n  }\n\n  render() {\n    if (this.state.data === undefined) {\n      return null;\n    }\n\n    console.log(\"scroll to ID\", this.state.idToScrollTo);\n\n    const storyData = this.state.data;\n\n    const storyLinkEl =\n      storyData.url === undefined ? (\n        <span>{storyData.title}</span>\n      ) : (\n        <a href={storyData.url}>{storyData.title}</a>\n      );\n\n    const comments = (storyData.kidsObj || []).filter(isValidComment);\n\n    document.title = `HN: ${storyData.title}`;\n\n    return (\n      <div>\n        <h2 style={{ overflowWrap: \"break-word\" }}>{storyLinkEl}</h2>\n        <h4>\n          <span>{storyData.by}</span>\n          <span>{\" | \"}</span>\n          <span>\n            {storyData.score}\n            {\" points\"}\n          </span>\n          <span>{\" | \"}</span>\n          <span>{timeSince(storyData.time)} ago</span>\n          <span>{\" | \"}</span>\n          <span>{getDomain(storyData.url)}</span>\n        </h4>\n        {storyData.text !== undefined && (\n          <p\n            className=\"top-text\"\n            dangerouslySetInnerHTML={{ __html: storyData.text }}\n          />\n        )}\n\n        <HnCommentList\n          childComments={comments}\n          canExpand={true}\n          depth={0}\n          collapsedIds={this.state.collapsedComments}\n          onUpdateOpen={(id, newOpen, scrollId) =>\n            this.handleCollapseEvent(id, newOpen, scrollId)\n          }\n          idToScrollTo={this.state.idToScrollTo}\n        />\n      </div>\n    );\n  }\n  handleCollapseEvent(\n    id: number,\n    newOpen: boolean,\n    scrollId: number | undefined\n  ): void {\n    // save the id to session storage\n\n    if (newOpen) {\n      // remove from list\n      const newIds = _.cloneDeep(this.state.collapsedComments);\n      _.remove(newIds, (c) => c === id);\n\n      sessionStorage.setItem(SESSION_COLLAPSED, JSON.stringify(newIds));\n      this.setState({ collapsedComments: newIds });\n    } else {\n      const newIds = this.state.collapsedComments.concat(id);\n\n      sessionStorage.setItem(SESSION_COLLAPSED, JSON.stringify(newIds));\n      this.setState({ collapsedComments: newIds });\n    }\n\n    if (scrollId !== undefined) {\n      this.setState({ idToScrollTo: scrollId });\n    }\n  }\n\n  componentDidMount() {\n    window.scrollTo({ top: 0 });\n\n    // set the data initially -- kick off async request if needed\n    this.updateDataFromDataLayer();\n    document.body.addEventListener(\"click\", this.anchorClickHandler);\n\n    const strCollapsedIds = sessionStorage.getItem(SESSION_COLLAPSED);\n    // load the collapsed comments from session storage\n\n    if (strCollapsedIds !== null) {\n      const collapsedIds = JSON.parse(strCollapsedIds) as number[];\n\n      this.setState({ collapsedComments: collapsedIds });\n    }\n\n    // save the read stories to localForage\n\n    this.props.onVisitMarker(this.props.id);\n  }\n\n  componentWillUnmount() {\n    document.body.removeEventListener(\"click\", this.anchorClickHandler);\n  }\n  anchorClickHandler(e: any) {\n    if (e.target.tagName !== \"A\") {\n      return;\n    }\n\n    // have a link\n\n    const link = e.target as HTMLAnchorElement;\n\n    const regex = /https?:\\/\\/news\\.ycombinator\\.com\\/item\\?id=(\\d+)/;\n    const matches = link.href.match(regex);\n\n    if (matches === null) {\n      link.target = \"_blank\";\n      return;\n    }\n\n    // this will navigate to the new page\n    this.props.history.push(\"/story/\" + matches[1]);\n\n    e.preventDefault();\n    return false;\n  }\n\n  private async updateDataFromDataLayer() {\n    const storyData = await this.getStoryData(this.props.id);\n\n    this.setState({ data: storyData });\n  }\n\n  componentDidUpdate(prevProps: HnStoryPageProps) {\n    // load the story once the data layer is available\n    if (prevProps.dataLayer === null && this.props.dataLayer !== null) {\n      this.updateDataFromDataLayer();\n    }\n  }\n\n  private async getStoryData(id: number): Promise<HnItem | undefined> {\n    return this.props.dataLayer === null\n      ? undefined\n      : await this.props.dataLayer.getStoryData(id);\n  }\n}\n","import \"./App.css\";\n\nimport _ from \"lodash\";\nimport React, { RefObject } from \"react\";\nimport { Route, RouteComponentProps, Switch, withRouter } from \"react-router\";\n\nimport { DataLayer } from \"./DataLayer\";\nimport { Header } from \"./Header\";\nimport { HnStoryList } from \"./HnStoryList\";\nimport { HnStoryPage } from \"./HnStoryPage\";\nimport localforage from \"localforage\";\n\ninterface StoryPageProps extends RouteComponentProps<{ id: string }> {}\ninterface AppPageProps extends RouteComponentProps<{ page?: string }> {}\n\nconst STORAGE_READ_ITEMS = \"STORAGE_READ_ITEMS\";\nclass _App extends React.Component<AppPageProps, AppState> {\n  dataLayer: RefObject<DataLayer>;\n\n  static getDerivedStateFromProps(props: AppPageProps, state: AppState) {\n    let listType: HnListSource;\n    switch (props.match.params.page) {\n      case \"day\":\n        listType = HnListSource.Day;\n        break;\n\n      case \"week\":\n        listType = HnListSource.Week;\n        break;\n\n      case \"month\":\n        listType = HnListSource.Month;\n        break;\n\n      default:\n        listType = HnListSource.Front;\n        break;\n    }\n\n    console.log(\"derived state\", props.match.params.page, listType);\n\n    return { ...state, activeList: listType };\n  }\n\n  constructor(props: AppPageProps) {\n    super(props);\n\n    this.state = {\n      items: [],\n      allItems: [],\n      activeList: HnListSource.Front,\n      error: undefined,\n      isLoading: false,\n      readIdList: {},\n      storyKey: 0,\n    };\n\n    this.dataLayer = React.createRef();\n\n    this.updateActiveDataStore = this.updateActiveDataStore.bind(this);\n    this.newItemsProvided = this.newItemsProvided.bind(this);\n  }\n\n  async componentDidMount() {\n    // read the saved read list\n\n    const readItems = await localforage.getItem<TrueHash>(STORAGE_READ_ITEMS);\n\n    if (readItems !== null) {\n      this.setState({ readIdList: readItems });\n    }\n  }\n\n  updateActiveDataStore(items: HnItem[], isActive: boolean) {\n    if (isActive) {\n      this.setState({ items });\n    }\n\n    // this is needed to ensure that state updates are atomic\n    // all new items need to be joined together... cannot skip updatesÍ\n    this.setState((prevState) => {\n      let allItems = _.cloneDeep(prevState.allItems).concat(items);\n      allItems = _.uniqBy(allItems, (c) => c.id);\n      console.log(\"new all itemS\", allItems);\n      return { allItems };\n    });\n  }\n\n  render() {\n    console.log(\"render state\", this.state, this.dataLayer);\n\n    if (this.state.error !== undefined) {\n      return (\n        <div>\n          <p>an error occurred, refresh the page</p>\n          <p>\n            unfortunately, your local data was cleared to prevent corruption\n          </p>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <DataLayer\n          ref={this.dataLayer}\n          provideNewItems={this.newItemsProvided}\n          updateIsLoadingStatus={(isLoading) => this.setState({ isLoading })}\n          loadFreshSource={this.state.activeList}\n        />\n\n        <Header\n          requestNewData={() => {\n            const isStoryPage =\n              this.props.location.pathname.indexOf(\"story\") > -1;\n\n            if (isStoryPage) {\n              // get the story id -- delete that data from local -- force update\n              const id = +this.props.location.pathname.split(\"/\")[2];\n\n              console.log(\"clear old story\");\n              this.dataLayer.current!.clearItemData(id);\n              this.setState((prevState) => {\n                return { storyKey: prevState.storyKey + 1 };\n              });\n              return;\n            }\n\n            if (!this.state.isLoading) {\n              this.dataLayer.current!.loadData(this.state.activeList);\n            }\n          }}\n          isLoading={this.state.isLoading}\n        />\n\n        <Switch>\n          <Route\n            path={\"/story/:id\"}\n            exact\n            render={(props: StoryPageProps) => (\n              <HnStoryPage\n                id={+props.match.params.id}\n                dataLayer={this.dataLayer.current}\n                history={props.history}\n                key={props.match.params.id + \"-\" + this.state.storyKey}\n                onVisitMarker={(id) => this.saveIdToReadList(id)}\n              />\n            )}\n          />\n          <Route\n            path=\"/:page?\"\n            render={(props: AppPageProps) => (\n              <HnStoryList\n                items={\n                  this.dataLayer.current === null\n                    ? []\n                    : this.dataLayer.current.getPageData(\n                        props.match.params.page\n                      )\n                }\n                readIds={this.state.readIdList}\n                {...props}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    );\n  }\n  saveIdToReadList(id: number): void {\n    const newReadList = _.cloneDeep(this.state.readIdList);\n    console.log(\"new read list\", newReadList);\n\n    // skip out if already there\n    if (newReadList[id]) {\n      return;\n    }\n\n    newReadList[id] = true;\n\n    localforage.setItem(STORAGE_READ_ITEMS, newReadList);\n    this.setState({ readIdList: newReadList });\n  }\n\n  newItemsProvided(items: HnItem[], listType: HnListSource): void {\n    if (listType === this.state.activeList) {\n      this.setState({ items });\n    }\n  }\n}\n\nexport const App = withRouter(_App);\n\nexport enum HnListSource {\n  Front,\n  Day,\n  Week,\n  Month,\n}\n\nexport type TrueHash = {\n  [key: number]: true;\n};\n\ninterface AppState {\n  items: HnItem[];\n  allItems: HnItem[];\n\n  error: any;\n\n  activeList: HnListSource;\n\n  isLoading: boolean;\n\n  readIdList: TrueHash;\n\n  storyKey: number;\n}\n","import _ from \"lodash\";\nimport React from \"react\";\n\nimport { HnListSource } from \"./App\";\nimport { LocalStorageWrapper } from \"./LocalStorageWrapper\";\nimport localforage from \"localforage\";\nimport { SESSION_COLLAPSED } from \"./HnStoryPage\";\n\ninterface DataLayerState {\n  allItems: HnItem[];\n  currentLists: DataList[];\n\n  isLoadingFresh: boolean;\n\n  isLoadingNewData: boolean;\n}\n\nexport interface DataList {\n  key: HnListSource;\n  stories: number[]; // will be an array of IDs\n}\n\ninterface DataLayerProps {\n  provideNewItems(items: HnItem[], listType: HnListSource): void;\n  updateIsLoadingStatus(newStatus: boolean): void;\n  loadFreshSource: HnListSource;\n}\n\nexport class DataLayer extends React.Component<DataLayerProps, DataLayerState> {\n  refreshData(activeList: HnListSource): void {}\n  constructor(props: DataLayerProps) {\n    super(props);\n\n    this.state = {\n      allItems: [],\n      currentLists: [],\n      isLoadingFresh: false,\n      isLoadingNewData: false,\n    };\n  }\n\n  render() {\n    // TODO: generalize the comps and events for the data type (don't duplicate)\n    return (\n      <React.Fragment>\n        <LocalStorageWrapper<HnItem[]>\n          dataDidUpdate={(allItems) =>\n            this.processDataFromLocalStorage(allItems, this.state.currentLists)\n          }\n          activeItem={this.state.allItems}\n          storageName=\"HN-ALL-ITEMS\"\n        />\n\n        <LocalStorageWrapper<DataList[]>\n          dataDidUpdate={(currentLists) =>\n            this.processDataFromLocalStorage(this.state.allItems, currentLists)\n          }\n          activeItem={this.state.currentLists}\n          storageName=\"HN-DATA-LISTS\"\n        />\n      </React.Fragment>\n    );\n  }\n\n  async getStoryData(id: number) {\n    let item = this.state.allItems.find((c) => c.id === id);\n    if (item !== undefined) {\n      return item;\n    }\n\n    // hit the API for the story data\n    return await this.getStoryFromServer(id);\n  }\n\n  public async getStoryFromServer(id: number) {\n    let url = \"/api/story/\" + id;\n\n    this.props.updateIsLoadingStatus(true);\n    const response = await fetch(url);\n    if (!response.ok) {\n      console.error(response);\n      return undefined;\n    }\n    const data: HnItem | { error: string } = await response.json();\n\n    if (\"error\" in data) {\n      console.error(data);\n      this.props.updateIsLoadingStatus(false);\n      return undefined;\n    }\n\n    console.log(\"hn item from server\", data);\n\n    this.props.updateIsLoadingStatus(false);\n\n    // ensure new story is saved locally\n    const newItems = this.state.allItems.concat(data);\n    this.setState({ allItems: newItems });\n    return data;\n  }\n\n  clearItemData(id: number) {\n    const itemRemoved = this.state.allItems.find((c) => c.id === id);\n\n    const newData = this.state.allItems.filter((c) => c.id !== id);\n    console.log(\"clear item\", {\n      before: this.state.allItems.length,\n      after: newData.length,\n    });\n\n    // need to clear any collpased ids also\n    if (itemRemoved !== undefined) {\n      // get all child ids\n\n      const itemsToCheck: (HnItem | KidsObj3)[] = [itemRemoved];\n\n      const strIds = sessionStorage.getItem(SESSION_COLLAPSED);\n\n      if (strIds !== null) {\n        const collapsedIds = JSON.parse(strIds) as number[];\n\n        const collapseHash = new Set(collapsedIds);\n\n        while (itemsToCheck.length) {\n          const item = itemsToCheck.shift();\n\n          if (item === undefined) {\n            continue;\n          }\n\n          // remove if collapsed\n          if (collapseHash.has(item.id)) {\n            collapseHash.delete(item.id);\n          }\n\n          item.kidsObj\n            ?.filter((c) => c !== null)\n            .forEach((c) => itemsToCheck.push(c!));\n        }\n\n        const newCollapse = Array.from(collapseHash);\n\n        console.log(\"old collapse\", collapsedIds, newCollapse);\n\n        sessionStorage.setItem(SESSION_COLLAPSED, JSON.stringify(newCollapse));\n      }\n    }\n\n    this.setState({ allItems: newData });\n  }\n\n  getPageData(page: string | undefined) {\n    // TODO: add loading step if data is missing -- figure out how to trigger refresh\n\n    console.log(\"getpagedata\", page, this.state);\n\n    if (page === \"\" || page === undefined) {\n      page = \"front\";\n    }\n\n    const pageToSourceMapping: { [key: string]: HnListSource } = {\n      day: HnListSource.Day,\n      week: HnListSource.Week,\n      month: HnListSource.Month,\n      front: HnListSource.Front,\n    };\n\n    const source = pageToSourceMapping[page];\n\n    if (source === undefined) {\n      console.error(\"unknown page -> source map\");\n      return [];\n    }\n\n    const idsToLoad = this.state.currentLists.find((c) => c.key === source);\n\n    if (idsToLoad === undefined) {\n      // TODO: this needs to fire off an update\n      console.log(\"no ids to load...\");\n      this.loadData(source);\n      return [];\n    }\n\n    let dataOut = idsToLoad.stories\n      .map((id) => this.state.allItems.find((c) => c.id === id))\n      .filter((c) => c !== undefined) as HnItem[];\n\n    if (source !== HnListSource.Front) {\n      dataOut = _.sortBy(dataOut, (c) => -c.score);\n    }\n\n    return dataOut;\n  }\n\n  public async loadData(activeList: HnListSource) {\n    console.log(\"loading data\");\n    let url = \"\";\n    switch (activeList) {\n      case HnListSource.Front:\n        url = \"/topstories/topstories\";\n        break;\n      case HnListSource.Day:\n        url = \"/topstories/day\";\n        break;\n      case HnListSource.Week:\n        url = \"/topstories/week\";\n        break;\n      case HnListSource.Month:\n        url = \"/topstories/month\";\n        break;\n    }\n\n    if (this.state.isLoadingNewData) {\n      console.log(\"only have one request at a time\");\n      return;\n    }\n\n    this.props.updateIsLoadingStatus(true);\n    this.setState({ isLoadingNewData: true });\n    const response = await fetch(url);\n    if (!response.ok) {\n      console.error(response);\n      this.props.updateIsLoadingStatus(false);\n      this.setState({ isLoadingNewData: false });\n      return;\n    }\n    let data: HnItem[] = await response.json();\n\n    if (activeList !== HnListSource.Front) {\n      // flip score to get descending\n      data = _.sortBy<HnItem>(data, (c) => -c.score);\n    }\n\n    // TODO: do not reload data on mount... use a button\n\n    // TODO: take that list of items and set it equal to the current list\n    // TODO: update the items with a merge of sorts instead of overwriting\n\n    console.log(\"hn items from server\", data);\n\n    this.props.updateIsLoadingStatus(false);\n    this.setState({ isLoadingNewData: false });\n    this.updateNewItems(data, activeList);\n  }\n\n  processDataFromLocalStorage(\n    allItems: HnItem[] | undefined,\n    allLists: DataList[] | undefined\n  ) {\n    // all items come through\n    // the lists come through also\n\n    console.log(\"fresh data from local storage\", allItems, allLists);\n\n    // these state updates ensure that the data is available for next pass\n    if (allItems !== undefined) {\n      this.setState({ allItems });\n    }\n\n    if (allLists !== undefined) {\n      this.setState({ currentLists: allLists });\n    }\n\n    if (allItems === undefined || allLists === undefined) {\n      if (!this.state.isLoadingFresh) {\n        console.log(\n          \"local storage is empty, loading fresh data based on active page\",\n          this.props.loadFreshSource\n        );\n        this.setState({ isLoadingFresh: true });\n        this.loadData(this.props.loadFreshSource);\n      }\n      return;\n    }\n\n    // iterate the lists\n\n    allLists.forEach((list) => {\n      const items = list.stories\n        .map((id) => allItems.find((c) => c.id === id))\n        .filter((c) => c !== undefined) as HnItem[];\n\n      this.props.provideNewItems(items, list.key);\n    });\n\n    // send out update commands to each one\n  }\n\n  updateNewItems(data: HnItem[] | undefined, listType: HnListSource): void {\n    console.log(\"items coming from server\", data, listType);\n\n    if (data === undefined) {\n      data = [];\n    }\n\n    // replace the list with the new IDs\n    const newList = data.map((c) => c.id);\n\n    const newDataList = _.cloneDeep(this.state.currentLists);\n\n    let listToUpdate = newDataList.find((c) => c.key === listType);\n\n    if (listToUpdate === undefined) {\n      newDataList.push({\n        key: listType,\n        stories: newList,\n      });\n    } else {\n      listToUpdate.stories = newList;\n    }\n\n    // get all items... replace those whose data is newer in this version\n\n    const newAllItems = _.cloneDeep(this.state.allItems);\n\n    const storiesToReturn: HnItem[] = [];\n\n    data.forEach((newStory) => {\n      const existingStoryIndex = newAllItems.findIndex(\n        (c) => c.id === newStory.id\n      );\n\n      // add the story if it is new\n      if (existingStoryIndex === -1) {\n        newAllItems.push(newStory);\n        storiesToReturn.push(newStory);\n        return;\n      }\n\n      // check the data if already found\n      const existingStory = newAllItems[existingStoryIndex];\n      if (existingStory.lastUpdated > newStory.lastUpdated) {\n        storiesToReturn.push(existingStory);\n        return;\n      }\n\n      newAllItems[existingStoryIndex] = newStory;\n      storiesToReturn.push(newStory);\n\n      // new story is actually newer... replace its data\n    });\n\n    // update otherwise\n\n    this.setState({ allItems: newAllItems, currentLists: newDataList }, () => {\n      this.props.provideNewItems(storiesToReturn, listType);\n    });\n  }\n}\n","import React from \"react\";\nimport { Button, Glyphicon, Nav, Navbar, NavItem } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { NavLink, Route } from \"react-router-dom\";\nimport { Spinner } from \"@blueprintjs/core\";\n\ninterface HeaderProps {\n  requestNewData(): void;\n  isLoading: boolean;\n}\n\nexport class Header extends React.PureComponent<HeaderProps> {\n  render() {\n    return (\n      <Navbar>\n        <Navbar.Header>\n          <Navbar.Brand>\n            <NavLink to=\"/\">hn-offline</NavLink>\n          </Navbar.Brand>\n        </Navbar.Header>\n        <Nav>\n          <LinkContainer to=\"/day\">\n            <NavItem eventKey={1}>day</NavItem>\n          </LinkContainer>\n\n          <LinkContainer to=\"/week\">\n            <NavItem eventKey={2}>week</NavItem>\n          </LinkContainer>\n\n          <LinkContainer to=\"/month\">\n            <NavItem eventKey={3}>month</NavItem>\n          </LinkContainer>\n        </Nav>\n\n        <Navbar.Form pullRight>\n          {this.props.isLoading && <Spinner size={32} />}\n          {!this.props.isLoading && (\n            <Button\n              bsStyle=\"primary\"\n              onClick={() => this.props.requestNewData()}\n            >\n              <Glyphicon glyph=\"refresh\" />\n            </Button>\n          )}\n        </Navbar.Form>\n      </Navbar>\n    );\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { getDomain } from \"./getDomain\";\nimport { timeSince } from \"./timeSince\";\nimport { Glyphicon } from \"react-bootstrap\";\nimport classNames from \"classnames\";\n\nexport interface HnStoryProps {\n  data: HnItem;\n\n  isRead: boolean | undefined;\n}\n\nexport class HnListItem extends React.Component<HnStoryProps> {\n  render() {\n    const story = this.props.data;\n\n    const commentCount = (\n      <React.Fragment>\n        {\" | \"}\n        <Link to={\"/story/\" + story.id}>\n          <Glyphicon glyph=\"comment\" /> {story.descendants}\n        </Link>\n      </React.Fragment>\n    );\n\n    const storyLinkEl =\n      story.url === undefined ? (\n        <Link to={\"/story/\" + story.id}>{story.title}</Link>\n      ) : (\n        <a href={story.url} target=\"_blank\">\n          {story.title}\n        </a>\n      );\n\n    return (\n      <div className={classNames({ isRead: this.props.isRead })}>\n        <p>{storyLinkEl}</p>\n        <p>\n          <span>\n            <Glyphicon glyph=\"chevron-up\" /> {\" \" + story.score}\n          </span>\n          {story.descendants !== undefined && commentCount}\n          <span>{\" | \" + timeSince(story.time) + \" ago\"}</span>\n          <span>{\" | \" + getDomain(story.url)}</span>\n        </p>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport { HnListItem } from \"./HnListItem\";\nimport { TrueHash } from \"./App\";\n\ninterface HnStoryListProps {\n  items: HnItem[];\n  readIds: TrueHash;\n}\n\nconst SESSION_SCROLL = \"SCROLL_LIST\";\nexport class HnStoryList extends React.Component<HnStoryListProps> {\n  constructor(props: HnStoryListProps) {\n    super(props);\n    this.state = {\n      items: [],\n    };\n  }\n\n  componentDidMount() {\n    // TODO: get the types right for this\n    const history = (this.props as any).history;\n    console.log(\"story list mount\", history);\n\n    if (history.action === \"POP\") {\n      // restore scroll pos if available\n      const scrollPos = +sessionStorage.getItem(SESSION_SCROLL)!;\n\n      if (!isNaN(scrollPos)) {\n        console.log(\"fire off scroll\", scrollPos);\n        window.scrollTo({ top: scrollPos });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    console.log(\"save scroll pos\", window.scrollY);\n\n    sessionStorage.setItem(SESSION_SCROLL, \"\" + window.scrollY);\n  }\n\n  render() {\n    document.title = `HN: Offline`;\n    return (\n      <div>\n        {this.props.items\n          .filter((story) => story.descendants !== undefined)\n          .map((item) => (\n            <HnListItem\n              data={item}\n              key={item.id}\n              isRead={this.props.readIds[item.id]}\n            />\n          ))}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap-theme.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\n\nimport localForage from \"localforage\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport smoothscroll from \"smoothscroll-polyfill\";\n\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// kick off the polyfill!\nsmoothscroll.polyfill();\n\nwindow.onerror = function(msg, url, lineNo, columnNo, error) {\n  // ... handle error ...\n  console.error(\"major error\", msg);\n  localForage.clear();\n\n  document.body.innerHTML =\n    \"<h1>major error occurred.  local storage cleared to avoid corruption. please refresh</h1>\";\n};\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route path={\"/:page?\"}>\n      <App />\n    </Route>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}