{"version":3,"sources":["App.tsx","LocalStorageWrapper.tsx","DataLayer.tsx","Header.tsx","HnListItem.tsx","HnStoryList.tsx","HnComment.tsx","HnStoryPage.tsx","serviceWorker.ts","index.tsx"],"names":["HnListSource","LocalStorageWrapper","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","item","undefined","inherits","createClass","key","value","_this2","itemCompressed","localStorage","getItem","storageName","LZString","decompress","removeItem","setState","dataDidUpdate","obj","JSON","parse","prevProps","prevState","_this3","_","isEqual","activeItem","console","log","strToStore","stringify","strToStoreCompressed","compress","setItem","React","Component","DataLayer","dayItems","frontItems","monthItems","weekItems","activeList","react_default","a","createElement","Fragment","LocalStorageWrapper_LocalStorageWrapper","updateNewItems","Front","Day","Week","Month","id","find","c","page","length","loadData","_loadData","asyncToGenerator","regenerator_default","mark","_callee","url","response","data","wrap","_context","prev","next","t0","abrupt","fetch","sent","ok","error","json","stop","_x","apply","arguments","listType","provideNewItems","Header","navbar","Group","align","Alignment","LEFT","Heading","Link","to","Divider","HnListItem","story","href","title","score","descendants","HnStoryList","items","onClick","requestNewData","map","HnListItem_HnListItem","HnComment","isOpen","childComments","comment","kidsObj","commentText","text","childrenToShow","dangerouslySetInnerHTML","__html","childComm","depth","card","interactive","e","handleCardClick","style","paddingLeft","width","by","stopPropagation","HnStoryPage","comments","HnComment_HnComment","window","scrollTo","_App","allItems","dataLayer","createRef","updateActiveDataStore","bind","assertThisInitialized","newItemsProvided","match","params","objectSpread","isActive","cloneDeep","concat","uniqBy","DataLayer_DataLayer","ref","Header_Header","Switch","es_Route","path","exact","render","HnStoryPage_HnStoryPage","current","getStoryData","HnStoryList_HnStoryList","getPageData","App","withRouter","Boolean","location","hostname","ReactDOM","BrowserRouter","Route","src_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e6fc65b.chunk.js","sourcesContent":["import \"./App.css\";\n\nimport _ from \"lodash\";\nimport React, { RefObject } from \"react\";\nimport { Route, RouteComponentProps, Switch, withRouter } from \"react-router\";\n\nimport { DataLayer } from \"./DataLayer\";\nimport { Header } from \"./Header\";\nimport { HnStoryList } from \"./HnStoryList\";\nimport { HnStoryPage } from \"./HnStoryPage\";\n\ninterface StoryPageProps extends RouteComponentProps<{ id: string }> {}\ninterface AppPageProps extends RouteComponentProps<{ page?: string }> {}\n\nclass _App extends React.Component<AppPageProps, AppState> {\n  dataLayer: RefObject<DataLayer>;\n\n  static getDerivedStateFromProps(props: AppPageProps, state: AppState) {\n    let listType: HnListSource;\n    switch (props.match.params.page) {\n      case \"day\":\n        listType = HnListSource.Day;\n        break;\n\n      case \"week\":\n        listType = HnListSource.Week;\n        break;\n\n      case \"month\":\n        listType = HnListSource.Month;\n        break;\n\n      default:\n        listType = HnListSource.Front;\n        break;\n    }\n\n    console.log(\"derived state\", props.match.params.page, listType);\n\n    return { ...state, activeList: listType };\n  }\n\n  constructor(props: AppPageProps) {\n    super(props);\n\n    this.state = {\n      items: [],\n      allItems: [],\n      activeList: HnListSource.Front\n    };\n\n    this.dataLayer = React.createRef();\n\n    this.updateActiveDataStore = this.updateActiveDataStore.bind(this);\n    this.newItemsProvided = this.newItemsProvided.bind(this);\n  }\n\n  updateActiveDataStore(items: HnItem[], isActive: boolean) {\n    if (isActive) {\n      this.setState({ items });\n    }\n\n    // this is needed to ensure that state updates are atomic\n    // all new items need to be joined together... cannot skip updatesÍ\n    this.setState(prevState => {\n      let allItems = _.cloneDeep(prevState.allItems).concat(items);\n      allItems = _.uniqBy(allItems, c => c.id);\n      console.log(\"new all itemS\", allItems);\n      return { allItems };\n    });\n  }\n\n  render() {\n    console.log(\"render state\", this.state);\n    return (\n      <div>\n        <DataLayer\n          ref={this.dataLayer}\n          provideNewItems={this.newItemsProvided}\n        />\n\n        <Header />\n\n        <Switch>\n          <Route\n            path={\"/story/:id\"}\n            exact\n            render={(props: StoryPageProps) => (\n              <HnStoryPage\n                data={\n                  this.dataLayer.current === null\n                    ? undefined\n                    : this.dataLayer.current.getStoryData(\n                        +props.match.params.id\n                      )\n                }\n              />\n            )}\n          />\n          <Route\n            path=\"/:page?\"\n            render={(props: AppPageProps) => (\n              <HnStoryList\n                items={\n                  this.dataLayer.current === null\n                    ? []\n                    : this.dataLayer.current.getPageData(\n                        props.match.params.page\n                      )\n                }\n                requestNewData={() => {\n                  this.dataLayer.current!.updateNewItems(\n                    undefined,\n                    this.state.activeList\n                  );\n                  this.setState({ items: [] });\n                }}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    );\n  }\n  newItemsProvided(items: HnItem[], listType: HnListSource): void {\n    if (listType === this.state.activeList) {\n      this.setState({ items });\n    }\n  }\n}\n\nexport const App = withRouter(_App);\n\nexport enum HnListSource {\n  Front,\n  Day,\n  Week,\n  Month\n}\n\ninterface AppState {\n  items: HnItem[];\n  allItems: HnItem[];\n\n  activeList: HnListSource;\n}\n","import _ from \"lodash\";\nimport React from \"react\";\nimport LZString from \"lz-string\";\n\nexport interface LocalStorageWrapperProps<TDataType> {\n  storageName: string;\n  activeItem: TDataType;\n\n  dataDidUpdate(item: TDataType | undefined): void;\n}\n\nexport interface LocalStorageWrapperState<TDataType> {\n  item: TDataType | undefined;\n}\n\nexport class LocalStorageWrapper<TDataType> extends React.Component<\n  LocalStorageWrapperProps<TDataType>,\n  LocalStorageWrapperState<TDataType>\n> {\n  constructor(props: LocalStorageWrapperProps<TDataType>) {\n    super(props);\n    this.state = {\n      item: undefined\n    };\n  }\n  render() {\n    return null;\n  }\n  componentDidMount() {\n    // check localStorage for obj\n    const itemCompressed = localStorage.getItem(this.props.storageName);\n    // decompress\n    if (itemCompressed === undefined || itemCompressed === null) {\n      this.setState({ item: undefined }, () =>\n        this.props.dataDidUpdate(undefined)\n      );\n      return;\n    }\n    const item = LZString.decompress(itemCompressed);\n    // seems to be some sort of corruption on load.. clear localStorage\n    if (item === null) {\n      localStorage.removeItem(this.props.storageName);\n      this.setState({ item: undefined }, () =>\n        this.props.dataDidUpdate(undefined)\n      );\n      return;\n    }\n    // parse JSON for what was found\n    const obj = JSON.parse(item) as TDataType;\n    this.setState({ item: obj }, () => this.props.dataDidUpdate(obj));\n  }\n  componentDidUpdate(\n    prevProps: LocalStorageWrapperProps<TDataType>,\n    prevState: LocalStorageWrapperState<TDataType>\n  ) {\n    // if activeItem changed... save to local storage.. update self\n    if (!_.isEqual(prevProps.activeItem, this.props.activeItem)) {\n      // do a check for undefined and kick out?\n      if (this.props.activeItem === undefined) {\n        return;\n      }\n      // TODO: this save should only happen when the data is new\n      if (_.isEqual(this.state.item, this.props.activeItem)) {\n        // do not need to save or update... it is the same as current state\n        // happens when loaded\n        return;\n      }\n      console.log(\"save item\", this.props.activeItem);\n      // compress and save\n      const strToStore = JSON.stringify(this.props.activeItem);\n      const strToStoreCompressed = LZString.compress(strToStore);\n      localStorage.setItem(this.props.storageName, strToStoreCompressed);\n      this.setState({ item: this.props.activeItem }, () =>\n        this.props.dataDidUpdate(this.props.activeItem)\n      );\n    }\n  }\n}\n","import React from \"react\";\n\nimport { HnListSource } from \"./App\";\nimport { LocalStorageWrapper } from \"./LocalStorageWrapper\";\n\ninterface DataLayerState {\n  frontItems: HnItem[];\n\n  dayItems: HnItem[];\n\n  weekItems: HnItem[];\n\n  monthItems: HnItem[];\n}\n\ninterface DataLayerProps {\n  provideNewItems(items: HnItem[], listType: HnListSource): void;\n}\n\nexport class DataLayer extends React.Component<DataLayerProps, DataLayerState> {\n  refreshData(activeList: HnListSource): void {}\n  constructor(props: DataLayerProps) {\n    super(props);\n\n    this.state = {\n      dayItems: [],\n      frontItems: [],\n      monthItems: [],\n      weekItems: []\n    };\n  }\n\n  render() {\n    // TODO: generalize the comps and events for the data type (don't duplicate)\n    return (\n      <React.Fragment>\n        <LocalStorageWrapper<HnItem[]>\n          dataDidUpdate={item => this.updateNewItems(item, HnListSource.Front)}\n          activeItem={this.state.frontItems}\n          storageName=\"HN-ITEMS\"\n        />\n\n        <LocalStorageWrapper<HnItem[]>\n          dataDidUpdate={item => this.updateNewItems(item, HnListSource.Day)}\n          activeItem={this.state.dayItems}\n          storageName=\"HN-DAY-ITEMS\"\n        />\n\n        <LocalStorageWrapper<HnItem[]>\n          dataDidUpdate={item => this.updateNewItems(item, HnListSource.Week)}\n          activeItem={this.state.weekItems}\n          storageName=\"HN-WEEK-ITEMS\"\n        />\n\n        <LocalStorageWrapper<HnItem[]>\n          dataDidUpdate={item => this.updateNewItems(item, HnListSource.Month)}\n          activeItem={this.state.monthItems}\n          storageName=\"HN-MONTH-ITEMS\"\n        />\n      </React.Fragment>\n    );\n  }\n\n  getStoryData(id: number) {\n    let item = this.state.frontItems.find(c => c.id === id);\n    if (item !== undefined) {\n      return item;\n    }\n\n    item = this.state.dayItems.find(c => c.id === id);\n    if (item !== undefined) {\n      return item;\n    }\n\n    item = this.state.weekItems.find(c => c.id === id);\n    if (item !== undefined) {\n      return item;\n    }\n\n    item = this.state.monthItems.find(c => c.id === id);\n    if (item !== undefined) {\n      return item;\n    }\n\n    return undefined;\n  }\n\n  getPageData(page: string | undefined) {\n    // TODO: add loading step if data is missing -- figure out how to trigger refresh\n    console.log(\"getpage state\", this.state);\n    switch (page) {\n      case \"day\":\n        if (this.state.dayItems.length === 0) {\n          this.loadData(HnListSource.Day);\n        }\n        return this.state.dayItems || [];\n      case \"week\":\n        if (this.state.weekItems.length === 0) {\n          this.loadData(HnListSource.Week);\n        }\n        return this.state.weekItems || [];\n      case \"month\":\n        if (this.state.monthItems.length === 0) {\n          this.loadData(HnListSource.Month);\n        }\n        return this.state.monthItems || [];\n      default:\n        if (this.state.frontItems.length === 0) {\n          this.loadData(HnListSource.Front);\n        }\n        return this.state.frontItems || [];\n    }\n  }\n\n  async loadData(activeList: HnListSource) {\n    console.log(\"loading data\");\n    let url = \"\";\n    switch (activeList) {\n      case HnListSource.Front:\n        url = \"/topstories/topstories\";\n        break;\n      case HnListSource.Day:\n        url = \"/topstories/day\";\n        break;\n      case HnListSource.Week:\n        url = \"/topstories/week\";\n        break;\n      case HnListSource.Month:\n        url = \"/topstories/month\";\n        break;\n    }\n    const response = await fetch(url);\n    if (!response.ok) {\n      console.error(response);\n      return;\n    }\n    const data: HnItem[] = await response.json();\n\n    // TODO: do not reload data on mount... use a button\n\n    // TODO: take that list of items and set it equal to the current list\n    // TODO: update the items with a merge of sorts instead of overwriting\n\n    console.log(\"hn items\", data);\n\n    this.updateNewItems(data, activeList);\n  }\n\n  updateNewItems(data: HnItem[] | undefined, listType: HnListSource): void {\n    console.log(\"new items2\", data, listType);\n\n    if (data === undefined) {\n      data = [];\n    }\n\n    switch (listType) {\n      case HnListSource.Front:\n        this.setState({ frontItems: data });\n        break;\n      case HnListSource.Day:\n        this.setState({ dayItems: data });\n        break;\n      case HnListSource.Week:\n        this.setState({ weekItems: data });\n        break;\n      case HnListSource.Month:\n        this.setState({ monthItems: data });\n        break;\n    }\n\n    this.props.provideNewItems(data, listType);\n  }\n}\n\n","import { Alignment, Navbar } from \"@blueprintjs/core\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport class Header extends React.Component {\n  render() {\n    return (\n      <Navbar>\n        <Navbar.Group align={Alignment.LEFT}>\n          <Navbar.Heading>\n            <Link to=\"/\">hn-offline</Link>\n          </Navbar.Heading>\n          <Navbar.Divider />\n          <Link to=\"/day\">day</Link>\n          <Navbar.Divider />\n          <Link to=\"/week\">week</Link>\n          <Navbar.Divider />\n          <Link to=\"/month\">month</Link>\n        </Navbar.Group>\n      </Navbar>\n    );\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport interface HnStoryProps {\n  data: HnItem;\n}\n\nexport class HnListItem extends React.Component<HnStoryProps> {\n  render() {\n    const story = this.props.data;\n    return (\n      <div>\n        <p>\n          <a href={story.url}>{story.title}</a>\n        </p>\n        <p>\n          <span>{story.score + \" | \"}</span>\n          <Link to={\"/story/\" + story.id}>\n            <span>{story.descendants}</span>\n          </Link>\n          <span>{\" | \" + story.score}</span>\n        </p>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport { HnListItem } from \"./HnListItem\";\n\ninterface HnStoryListProps {\n  items: HnItem[];\n  requestNewData(): void;\n}\n\nexport class HnStoryList extends React.Component<HnStoryListProps> {\n  constructor(props: HnStoryListProps) {\n    super(props);\n    this.state = {\n      items: []\n    };\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <div onClick={this.props.requestNewData}>reload</div>\n        <div>\n          {this.props.items.map(item => (\n            <HnListItem data={item} key={item.id} />\n          ))}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import { Card } from \"@blueprintjs/core\";\nimport React from \"react\";\n\nexport interface HnCommentProps {\n  comment: KidsObj3;\n  depth: number;\n}\n\ninterface HnCommentState {\n  isOpen: boolean;\n}\n\nexport class HnComment extends React.Component<HnCommentProps, HnCommentState> {\n  constructor(props: HnCommentProps) {\n    super(props);\n\n    this.state = {\n      isOpen: true\n    };\n  }\n\n  render() {\n    const childComments = this.props.comment.kidsObj || [];\n    const commentText = this.props.comment.text || \"\";\n\n    // TODO: rewrite links to hn to open in this site instead\n\n    const childrenToShow = !this.state.isOpen ? null : (\n      <React.Fragment>\n        <p dangerouslySetInnerHTML={{ __html: commentText }} />\n\n        {childComments.map(childComm => (\n          <HnComment\n            key={this.props.comment.id + \"-\" + childComm.id}\n            comment={childComm}\n            depth={this.props.depth + 1}\n          />\n        ))}\n      </React.Fragment>\n    );\n\n    return (\n      <Card\n        interactive\n        onClick={e => this.handleCardClick(e)}\n        style={{\n          paddingLeft: this.props.depth * 10,\n          width: \"100%\"\n        }}\n      >\n        <p>{this.props.comment.by}</p>\n\n        {childrenToShow}\n      </Card>\n    );\n  }\n  handleCardClick(e: React.MouseEvent<HTMLDivElement>): void {\n    // this is to prevent other cards from collapsing too\n    e.stopPropagation();\n\n    this.setState({ isOpen: !this.state.isOpen });\n  }\n}\n","import React from \"react\";\nimport { HnComment } from \"./HnComment\";\n\nexport interface HnStoryPageProps {\n  data: HnItem | undefined;\n}\n\nexport class HnStoryPage extends React.Component<HnStoryPageProps> {\n  render() {\n    if (this.props.data === undefined) {\n      return null;\n    }\n    const comments = this.props.data.kidsObj || [];\n    return (\n      <div>\n        <h2>{this.props.data.title}</h2>\n        {comments.map(comment => (\n          <HnComment key={comment.id} comment={comment} depth={0} />\n        ))}\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"@blueprintjs/core/lib/css/blueprint.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route path={\"/:page?\"}>\n      <App />\n    </Route>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}