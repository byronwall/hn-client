{"version":3,"sources":["LocalStorageWrapper.tsx","DataLayer.tsx","Header.tsx","getDomain.tsx","timeSince.tsx","HnListItem.tsx","HnStoryList.tsx","HnCommentList.tsx","HnComment.tsx","HnStoryPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LocalStorageWrapper","props","state","item","undefined","localForage","getItem","this","storageName","itemCompressed","setState","dataDidUpdate","removeItem","obj","JSON","parse","prevProps","prevState","_","isEqual","activeItem","console","log","strToStore","stringify","setItem","React","Component","DataLayer","allItems","currentLists","isLoadingFresh","isLoadingNewData","activeList","Fragment","processDataFromLocalStorage","id","find","c","getStoryFromServer","url","updateIsLoadingStatus","fetch","response","ok","error","json","data","page","source","day","HnListSource","Day","week","Week","month","Month","front","Front","idsToLoad","key","loadData","dataOut","stories","map","filter","sortBy","score","updateNewItems","allLists","forEach","list","items","provideNewItems","loadFreshSource","listType","newList","newDataList","cloneDeep","listToUpdate","push","newAllItems","storiesToReturn","newStory","existingStoryIndex","findIndex","existingStory","lastUpdated","Header","Navbar","Brand","NavLink","to","Nav","NavItem","eventKey","Form","pullRight","isLoading","size","Route","render","location","pathname","indexOf","Button","bsStyle","onClick","requestNewData","Glyphicon","glyph","PureComponent","getDomain","matches","match","timeSince","date","seconds","Math","floor","Date","getTime","interval","HnListItem","story","commentCount","Link","descendants","storyLinkEl","title","href","target","time","HnStoryList","history","action","scrollPos","sessionStorage","isNaN","window","scrollTo","scrollY","document","HnCommentList","childRefs","childComments","createRef","validChildren","comm","childComm","index","comment","depth","canExpand","ref","onUpdateOpen","newOpen","isOpen","collapsedIds","idToScrollTo","colors","HnComment","divRef","expandSelf","scrollIfDesired","dims","current","offsetTop","kidsObj","isValidComment","commentText","text","childrenToShow","className","dangerouslySetInnerHTML","__html","length","newIsOpen","scrollId","borderColor","classNames","collapsed","e","handleCardClick","style","paddingLeft","max","marginLeft","borderLeftColor","borderLeftWidth","borderRight","paddingRight","fontWeight","by","stopPropagation","tagName","gutterRatio","pageX","offsetLeft","innerWidth","deleted","HnStoryPage","collapsedComments","anchorClickHandler","bind","storyData","comments","overflowWrap","handleCollapseEvent","newIds","remove","concat","updateDataFromDataLayer","body","addEventListener","strCollapsedIds","removeEventListener","link","preventDefault","getStoryData","dataLayer","_App","updateActiveDataStore","newItemsProvided","params","isActive","uniqBy","Switch","path","exact","getPageData","App","withRouter","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","smoothscroll","polyfill","onerror","msg","lineNo","columnNo","clear","innerHTML","ReactDOM","BrowserRouter","getElementById","URL","process","origin","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e76b542e.chunk.js","sourcesContent":["import localForage from \"localforage\";\nimport _ from \"lodash\";\n\nimport React from \"react\";\n\nexport interface LocalStorageWrapperProps<TDataType> {\n  storageName: string;\n  activeItem: TDataType;\n\n  dataDidUpdate(item: TDataType | undefined): void;\n}\n\nexport interface LocalStorageWrapperState<TDataType> {\n  item: TDataType | undefined;\n}\n\nexport class LocalStorageWrapper<TDataType> extends React.Component<\n  LocalStorageWrapperProps<TDataType>,\n  LocalStorageWrapperState<TDataType>\n> {\n  constructor(props: LocalStorageWrapperProps<TDataType>) {\n    super(props);\n    this.state = {\n      item: undefined\n    };\n  }\n  render() {\n    return null;\n  }\n  async componentDidMount() {\n    // check localStorage for obj\n    const itemCompressed = await localForage.getItem<string>(\n      this.props.storageName\n    );\n    // decompress\n    if (itemCompressed === undefined || itemCompressed === null) {\n      this.setState({ item: undefined }, () =>\n        this.props.dataDidUpdate(undefined)\n      );\n      return;\n    }\n\n    // seems to be some sort of corruption on load.. clear localStorage\n    if (itemCompressed === null) {\n      localForage.removeItem(this.props.storageName);\n      this.setState({ item: undefined }, () =>\n        this.props.dataDidUpdate(undefined)\n      );\n      return;\n    }\n    // parse JSON for what was found\n    const obj = JSON.parse(itemCompressed) as TDataType;\n    this.setState({ item: obj }, () => this.props.dataDidUpdate(obj));\n  }\n  componentDidUpdate(\n    prevProps: LocalStorageWrapperProps<TDataType>,\n    prevState: LocalStorageWrapperState<TDataType>\n  ) {\n    // if activeItem changed... save to local storage.. update self\n    if (!_.isEqual(prevProps.activeItem, this.props.activeItem)) {\n      // do a check for undefined and kick out?\n      if (this.props.activeItem === undefined) {\n        return;\n      }\n      // TODO: this save should only happen when the data is new\n      if (_.isEqual(this.state.item, this.props.activeItem)) {\n        // do not need to save or update... it is the same as current state\n        // happens when loaded\n        return;\n      }\n      console.log(\"save item\", this.props.activeItem);\n      // compress and save\n      const strToStore = JSON.stringify(this.props.activeItem);\n\n      localForage.setItem(this.props.storageName, strToStore);\n      this.setState({ item: this.props.activeItem }, () => {\n        console.log(\"updating data after a save?\");\n        this.props.dataDidUpdate(this.props.activeItem);\n      });\n    }\n  }\n}\n","import _ from \"lodash\";\nimport React from \"react\";\n\nimport { HnListSource } from \"./App\";\nimport { LocalStorageWrapper } from \"./LocalStorageWrapper\";\n\ninterface DataLayerState {\n  allItems: HnItem[];\n  currentLists: DataList[];\n\n  isLoadingFresh: boolean;\n\n  isLoadingNewData: boolean;\n}\n\nexport interface DataList {\n  key: HnListSource;\n  stories: number[]; // will be an array of IDs\n}\n\ninterface DataLayerProps {\n  provideNewItems(items: HnItem[], listType: HnListSource): void;\n  updateIsLoadingStatus(newStatus: boolean): void;\n  loadFreshSource: HnListSource;\n}\n\nexport class DataLayer extends React.Component<DataLayerProps, DataLayerState> {\n  refreshData(activeList: HnListSource): void {}\n  constructor(props: DataLayerProps) {\n    super(props);\n\n    this.state = {\n      allItems: [],\n      currentLists: [],\n      isLoadingFresh: false,\n      isLoadingNewData: false,\n    };\n  }\n\n  render() {\n    // TODO: generalize the comps and events for the data type (don't duplicate)\n    return (\n      <React.Fragment>\n        <LocalStorageWrapper<HnItem[]>\n          dataDidUpdate={(allItems) =>\n            this.processDataFromLocalStorage(allItems, this.state.currentLists)\n          }\n          activeItem={this.state.allItems}\n          storageName=\"HN-ALL-ITEMS\"\n        />\n\n        <LocalStorageWrapper<DataList[]>\n          dataDidUpdate={(currentLists) =>\n            this.processDataFromLocalStorage(this.state.allItems, currentLists)\n          }\n          activeItem={this.state.currentLists}\n          storageName=\"HN-DATA-LISTS\"\n        />\n      </React.Fragment>\n    );\n  }\n\n  async getStoryData(id: number) {\n    let item = this.state.allItems.find((c) => c.id === id);\n    if (item !== undefined) {\n      return item;\n    }\n\n    // hit the API for the story data\n    return await this.getStoryFromServer(id);\n  }\n\n  public async getStoryFromServer(id: number) {\n    let url = \"/api/story/\" + id;\n\n    this.props.updateIsLoadingStatus(true);\n    const response = await fetch(url);\n    if (!response.ok) {\n      console.error(response);\n      return undefined;\n    }\n    const data: HnItem | { error: string } = await response.json();\n\n    if (\"error\" in data) {\n      console.error(data);\n      this.props.updateIsLoadingStatus(false);\n      return undefined;\n    }\n\n    console.log(\"hn item from server\", data);\n\n    this.props.updateIsLoadingStatus(false);\n    return data;\n  }\n\n  getPageData(page: string | undefined) {\n    // TODO: add loading step if data is missing -- figure out how to trigger refresh\n\n    console.log(\"getpagedata\", page, this.state);\n\n    if (page === \"\" || page === undefined) {\n      page = \"front\";\n    }\n\n    const pageToSourceMapping: { [key: string]: HnListSource } = {\n      day: HnListSource.Day,\n      week: HnListSource.Week,\n      month: HnListSource.Month,\n      front: HnListSource.Front,\n    };\n\n    const source = pageToSourceMapping[page];\n\n    if (source === undefined) {\n      console.error(\"unknown page -> source map\");\n      return [];\n    }\n\n    const idsToLoad = this.state.currentLists.find((c) => c.key === source);\n\n    if (idsToLoad === undefined) {\n      // TODO: this needs to fire off an update\n      console.log(\"no ids to load...\");\n      this.loadData(source);\n      return [];\n    }\n\n    let dataOut = idsToLoad.stories\n      .map((id) => this.state.allItems.find((c) => c.id === id))\n      .filter((c) => c !== undefined) as HnItem[];\n\n    if (source !== HnListSource.Front) {\n      dataOut = _.sortBy(dataOut, (c) => -c.score);\n    }\n\n    return dataOut;\n  }\n\n  public async loadData(activeList: HnListSource) {\n    console.log(\"loading data\");\n    let url = \"\";\n    switch (activeList) {\n      case HnListSource.Front:\n        url = \"/topstories/topstories\";\n        break;\n      case HnListSource.Day:\n        url = \"/topstories/day\";\n        break;\n      case HnListSource.Week:\n        url = \"/topstories/week\";\n        break;\n      case HnListSource.Month:\n        url = \"/topstories/month\";\n        break;\n    }\n\n    if (this.state.isLoadingNewData) {\n      console.log(\"only have one request at a time\");\n      return;\n    }\n\n    this.props.updateIsLoadingStatus(true);\n    this.setState({ isLoadingNewData: true });\n    const response = await fetch(url);\n    if (!response.ok) {\n      console.error(response);\n      this.props.updateIsLoadingStatus(false);\n      this.setState({ isLoadingNewData: false });\n      return;\n    }\n    let data: HnItem[] = await response.json();\n\n    if (activeList !== HnListSource.Front) {\n      // flip score to get descending\n      data = _.sortBy<HnItem>(data, (c) => -c.score);\n    }\n\n    // TODO: do not reload data on mount... use a button\n\n    // TODO: take that list of items and set it equal to the current list\n    // TODO: update the items with a merge of sorts instead of overwriting\n\n    console.log(\"hn items from server\", data);\n\n    this.props.updateIsLoadingStatus(false);\n    this.setState({ isLoadingNewData: false });\n    this.updateNewItems(data, activeList);\n  }\n\n  processDataFromLocalStorage(\n    allItems: HnItem[] | undefined,\n    allLists: DataList[] | undefined\n  ) {\n    // all items come through\n    // the lists come through also\n\n    console.log(\"fresh data from local storage\", allItems, allLists);\n\n    // these state updates ensure that the data is available for next pass\n    if (allItems !== undefined) {\n      this.setState({ allItems });\n    }\n\n    if (allLists !== undefined) {\n      this.setState({ currentLists: allLists });\n    }\n\n    if (allItems === undefined || allLists === undefined) {\n      if (!this.state.isLoadingFresh) {\n        console.log(\n          \"local storage is empty, loading fresh data based on active page\",\n          this.props.loadFreshSource\n        );\n        this.setState({ isLoadingFresh: true });\n        this.loadData(this.props.loadFreshSource);\n      }\n      return;\n    }\n\n    // iterate the lists\n\n    allLists.forEach((list) => {\n      const items = list.stories\n        .map((id) => allItems.find((c) => c.id === id))\n        .filter((c) => c !== undefined) as HnItem[];\n\n      this.props.provideNewItems(items, list.key);\n    });\n\n    // send out update commands to each one\n  }\n\n  updateNewItems(data: HnItem[] | undefined, listType: HnListSource): void {\n    console.log(\"items coming from server\", data, listType);\n\n    if (data === undefined) {\n      data = [];\n    }\n\n    // replace the list with the new IDs\n    const newList = data.map((c) => c.id);\n\n    const newDataList = _.cloneDeep(this.state.currentLists);\n\n    let listToUpdate = newDataList.find((c) => c.key === listType);\n\n    if (listToUpdate === undefined) {\n      newDataList.push({\n        key: listType,\n        stories: newList,\n      });\n    } else {\n      listToUpdate.stories = newList;\n    }\n\n    // get all items... replace those whose data is newer in this version\n\n    const newAllItems = _.cloneDeep(this.state.allItems);\n\n    const storiesToReturn: HnItem[] = [];\n\n    data.forEach((newStory) => {\n      const existingStoryIndex = newAllItems.findIndex(\n        (c) => c.id === newStory.id\n      );\n\n      // add the story if it is new\n      if (existingStoryIndex === -1) {\n        newAllItems.push(newStory);\n        storiesToReturn.push(newStory);\n        return;\n      }\n\n      // check the data if already found\n      const existingStory = newAllItems[existingStoryIndex];\n      if (existingStory.lastUpdated > newStory.lastUpdated) {\n        storiesToReturn.push(existingStory);\n        return;\n      }\n\n      newAllItems[existingStoryIndex] = newStory;\n      storiesToReturn.push(newStory);\n\n      // new story is actually newer... replace its data\n    });\n\n    // update otherwise\n\n    this.setState({ allItems: newAllItems, currentLists: newDataList }, () => {\n      this.props.provideNewItems(storiesToReturn, listType);\n    });\n  }\n}\n","import React from \"react\";\nimport { Button, Glyphicon, Nav, Navbar, NavItem } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { NavLink, Route } from \"react-router-dom\";\nimport { Spinner } from \"@blueprintjs/core\";\n\ninterface HeaderProps {\n  requestNewData(): void;\n  isLoading: boolean;\n}\n\nexport class Header extends React.PureComponent<HeaderProps> {\n  render() {\n    return (\n      <Navbar>\n        <Navbar.Header>\n          <Navbar.Brand>\n            <NavLink to=\"/\">hn-offline</NavLink>\n          </Navbar.Brand>\n        </Navbar.Header>\n        <Nav>\n          <LinkContainer to=\"/day\">\n            <NavItem eventKey={1}>day</NavItem>\n          </LinkContainer>\n\n          <LinkContainer to=\"/week\">\n            <NavItem eventKey={2}>week</NavItem>\n          </LinkContainer>\n\n          <LinkContainer to=\"/month\">\n            <NavItem eventKey={3}>month</NavItem>\n          </LinkContainer>\n        </Nav>\n\n        <Navbar.Form pullRight>\n          {this.props.isLoading && <Spinner size={32} />}\n          {!this.props.isLoading && (\n            <Route\n              render={({ location }) => {\n                return location.pathname.indexOf(\"/story\") === -1 ? (\n                  <Button\n                    bsStyle=\"primary\"\n                    onClick={() => this.props.requestNewData()}\n                  >\n                    <Glyphicon glyph=\"refresh\" />\n                  </Button>\n                ) : null;\n              }}\n            />\n          )}\n        </Navbar.Form>\n      </Navbar>\n    );\n  }\n}\n","export function getDomain(url: string | undefined) {\n  if (url === undefined) {\n    return \"\";\n  }\n  var matches = url.match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i);\n  var domain = matches && matches[1];\n  return domain;\n}\n","export function timeSince(date: number) {\n  var seconds = Math.floor(new Date().getTime() / 1000 - date);\n  var interval = Math.floor(seconds / 31536000);\n  if (interval > 1) {\n    return interval + \" years\";\n  }\n  interval = Math.floor(seconds / 2592000);\n  if (interval > 1) {\n    return interval + \" months\";\n  }\n  interval = Math.floor(seconds / 86400);\n  if (interval > 1) {\n    return interval + \" days\";\n  }\n  interval = Math.floor(seconds / 3600);\n  if (interval >= 1) {\n    return interval + \" hour\" + (interval > 1 ? \"s\" : \"\");\n  }\n  interval = Math.floor(seconds / 60);\n  if (interval > 1) {\n    return interval + \" minutes\";\n  }\n  return Math.floor(seconds) + \" seconds\";\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { getDomain } from \"./getDomain\";\nimport { timeSince } from \"./timeSince\";\nimport { Glyphicon } from \"react-bootstrap\";\n\nexport interface HnStoryProps {\n  data: HnItem;\n}\n\nexport class HnListItem extends React.Component<HnStoryProps> {\n  render() {\n    const story = this.props.data;\n\n    const commentCount = (\n      <React.Fragment>\n        {\" | \"}\n        <Link to={\"/story/\" + story.id}>\n          <Glyphicon glyph=\"comment\" /> {story.descendants}\n        </Link>\n      </React.Fragment>\n    );\n\n    const storyLinkEl =\n      story.url === undefined ? (\n        <Link to={\"/story/\" + story.id}>{story.title}</Link>\n      ) : (\n        <a href={story.url} target=\"_blank\">\n          {story.title}\n        </a>\n      );\n\n    return (\n      <div>\n        <p>{storyLinkEl}</p>\n        <p>\n          <span>\n            <Glyphicon glyph=\"chevron-up\" /> {\" \" + story.score}\n          </span>\n          {story.descendants !== undefined && commentCount}\n          <span>{\" | \" + timeSince(story.time) + \" ago\"}</span>\n          <span>{\" | \" + getDomain(story.url)}</span>\n        </p>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport { HnListItem } from \"./HnListItem\";\n\ninterface HnStoryListProps {\n  items: HnItem[];\n}\n\nconst SESSION_SCROLL = \"SCROLL_LIST\";\nexport class HnStoryList extends React.Component<HnStoryListProps> {\n  constructor(props: HnStoryListProps) {\n    super(props);\n    this.state = {\n      items: [],\n    };\n  }\n\n  componentDidMount() {\n    // TODO: get the types right for this\n    const history = (this.props as any).history;\n    console.log(\"story list mount\", history);\n\n    if (history.action === \"POP\") {\n      // restore scroll pos if available\n      const scrollPos = +sessionStorage.getItem(SESSION_SCROLL)!;\n\n      if (!isNaN(scrollPos)) {\n        console.log(\"fire off scroll\", scrollPos);\n        window.scrollTo(0, scrollPos);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    console.log(\"save scroll pos\", window.scrollY);\n\n    sessionStorage.setItem(SESSION_SCROLL, \"\" + window.scrollY);\n  }\n\n  render() {\n    document.title = `HN: Offline`;\n    return (\n      <div>\n        {this.props.items\n          .filter((story) => story.descendants !== undefined)\n          .map((item) => (\n            <HnListItem data={item} key={item.id} />\n          ))}\n      </div>\n    );\n  }\n}\n","import computeScrollIntoView from \"compute-scroll-into-view\";\nimport _ from \"lodash\";\nimport React from \"react\";\n\nimport { HnComment } from \"./HnComment\";\n\ninterface HnCommentListProps {\n  childComments: Array<KidsObj3 | null>;\n  depth: number;\n  canExpand: boolean;\n\n  onUpdateOpen(\n    id: number,\n    newOpen: boolean,\n    scrollId: number | undefined\n  ): void;\n\n  collapsedIds: number[];\n  idToScrollTo: number | undefined;\n}\n\nexport class HnCommentList extends React.Component<HnCommentListProps, {}> {\n  childRefs: Array<React.RefObject<HnComment>> = [];\n  constructor(props: HnCommentListProps) {\n    super(props);\n    props.childComments.forEach((item) => {\n      if (item === null) {\n        return;\n      }\n      this.childRefs[item.id] = React.createRef();\n    });\n  }\n  render() {\n    const validChildren = this.props.childComments.filter(\n      (comm) => comm !== null\n    );\n    return (\n      <React.Fragment>\n        {validChildren.map((childComm, index) => (\n          <HnComment\n            key={childComm!.id}\n            comment={childComm}\n            depth={this.props.depth}\n            canExpand={this.props.canExpand}\n            ref={this.childRefs[childComm!.id]}\n            onUpdateOpen={(id, newOpen) =>\n              this.props.onUpdateOpen(id, newOpen, validChildren[index + 1]?.id)\n            }\n            isOpen={\n              !(\n                this.props.collapsedIds.findIndex(\n                  (c) => childComm !== null && c === childComm.id\n                ) >= 0\n              )\n            }\n            collapsedIds={this.props.collapsedIds}\n            idToScrollTo={this.props.idToScrollTo}\n          />\n        ))}\n      </React.Fragment>\n    );\n  }\n}\n","import classNames from \"classnames\";\nimport React from \"react\";\n\nimport { HnCommentList } from \"./HnCommentList\";\nimport { timeSince } from \"./timeSince\";\n\nexport interface HnCommentProps {\n  comment: KidsObj3 | null;\n  depth: number;\n\n  canExpand: boolean;\n\n  isOpen: boolean;\n  onUpdateOpen(\n    id: number,\n    newIsOpen: boolean,\n    scrollId: number | undefined\n  ): void;\n  collapsedIds: number[];\n  idToScrollTo: number | undefined;\n}\n\ninterface HnCommentState {\n  expandSelf: boolean;\n}\n\nconst colors = [\n  \"#bc8672\",\n  \"#c5be53\",\n  \"#d46850\",\n  \"#8c7f3b\",\n  \"#dec392\",\n  \"#c9893a\",\n];\n\nexport class HnComment extends React.Component<HnCommentProps, HnCommentState> {\n  divRef: React.RefObject<HTMLDivElement>;\n\n  componentDidMount() {\n    this.scrollIfDesired();\n  }\n\n  componentDidUpdate() {\n    this.scrollIfDesired();\n  }\n\n  scrollIfDesired() {\n    console.log(\"scroll to id \", this.props.idToScrollTo);\n    if (this.props.idToScrollTo === this.props.comment?.id) {\n      const dims = this.divRef.current?.offsetTop;\n      console.log(\"scrolling to me\", dims);\n\n      if (dims !== undefined) {\n        window.scrollTo(0, dims - 80);\n      }\n    }\n  }\n\n  static getDerivedStateFromProps(\n    props: HnCommentProps,\n    state: HnCommentState\n  ) {\n    // if a parent expands, collapse this one\n    if (!props.canExpand) {\n      return { expandSelf: false };\n    }\n\n    return null;\n  }\n\n  constructor(props: HnCommentProps) {\n    super(props);\n\n    this.state = {\n      expandSelf: false,\n    };\n\n    this.divRef = React.createRef();\n  }\n\n  getDivRef() {\n    return this.divRef.current!;\n  }\n\n  render() {\n    console.log(\"isOpen\", this.props.isOpen);\n    const comment = this.props.comment;\n\n    if (comment === null) {\n      return null;\n    }\n\n    const childComments = (comment.kidsObj || []).filter(isValidComment);\n    const commentText = comment.text || \"\";\n\n    if (!isValidComment(comment)) {\n      // kick out nothing if the comment was deleted and has no children\n      return null;\n    }\n\n    // TODO: rewrite links to hn to open in this site instead\n\n    const childrenToShow = !this.props.isOpen ? null : (\n      <React.Fragment>\n        <p\n          className=\"comment\"\n          dangerouslySetInnerHTML={{ __html: commentText }}\n        />\n\n        {childComments.length > 0 && (\n          <HnCommentList\n            childComments={childComments}\n            canExpand={this.props.canExpand && !this.state.expandSelf}\n            depth={this.props.depth + 1}\n            onUpdateOpen={(id, newIsOpen, scrollId) =>\n              this.props.onUpdateOpen(id, newIsOpen, scrollId)\n            }\n            collapsedIds={this.props.collapsedIds}\n            idToScrollTo={this.props.idToScrollTo}\n          />\n        )}\n      </React.Fragment>\n    );\n\n    const borderColor =\n      this.props.depth < colors.length ? colors[this.props.depth] : \"#bbb\";\n    return (\n      <div\n        className={classNames(\"bp3-card\", { collapsed: !this.props.isOpen })}\n        onClick={(e) => this.handleCardClick(e)}\n        style={{\n          paddingLeft: 12 + Math.max(4 - this.props.depth),\n          marginLeft:\n            this.state.expandSelf && this.props.isOpen\n              ? -17 * this.props.depth\n              : 0,\n\n          borderLeftColor: borderColor,\n\n          borderLeftWidth: this.state.expandSelf ? 6 : undefined,\n\n          borderRight: this.state.expandSelf\n            ? \"1px solid\" + borderColor\n            : undefined,\n          paddingRight: this.state.expandSelf ? 6 : undefined,\n        }}\n      >\n        <p\n          style={{ fontWeight: this.props.isOpen ? 450 : 300 }}\n          ref={this.divRef}\n        >\n          {comment.by}\n          {\" | \"}\n          {timeSince(comment.time)}\n          {\" ago\"}\n        </p>\n\n        {childrenToShow}\n      </div>\n    );\n  }\n  handleCardClick(e: React.MouseEvent<HTMLDivElement>): void {\n    // this is to prevent other cards from collapsing too\n\n    e.stopPropagation();\n\n    // dont update state if click was A link\n    if ((e.target as any).tagName === \"A\") {\n      return;\n    }\n\n    const target = e.target as any;\n\n    // allow some gutter expansion once shifted over\n    const gutterRatio = this.state.expandSelf ? 0.85 : 0.9;\n\n    if (\n      this.props.depth > 0 &&\n      this.props.canExpand &&\n      (e.pageX + target.offsetLeft) / window.innerWidth > gutterRatio\n    ) {\n      this.setState({ expandSelf: !this.state.expandSelf });\n    } else {\n      const isOpen = !this.props.isOpen;\n\n      if (this.props.comment === null) {\n        return;\n      }\n\n      this.props.onUpdateOpen(this.props.comment.id, isOpen, undefined);\n    }\n  }\n}\n\nexport function isValidComment(comment: KidsObj3 | null) {\n  if (comment === null) {\n    return false;\n  }\n  const isBad =\n    comment.deleted &&\n    (comment.kidsObj === undefined || comment.kidsObj!.length === 0);\n\n  return !isBad;\n}\n","import { History } from \"history\";\nimport React from \"react\";\n\nimport { DataLayer } from \"./DataLayer\";\nimport { getDomain } from \"./getDomain\";\nimport { isValidComment } from \"./HnComment\";\nimport { HnCommentList } from \"./HnCommentList\";\nimport { timeSince } from \"./timeSince\";\nimport _ from \"lodash\";\n\ninterface HnStoryPageState {\n  data: HnItem | undefined;\n\n  collapsedComments: number[];\n  idToScrollTo: number | undefined;\n}\n\nexport interface HnStoryPageProps {\n  dataLayer: DataLayer | null;\n  id: number;\n  history: History;\n}\n\nconst SESSION_COLLAPSED = \"SESSION_COLLAPSED\";\nexport class HnStoryPage extends React.Component<\n  HnStoryPageProps,\n  HnStoryPageState\n> {\n  constructor(props: HnStoryPageProps) {\n    super(props);\n\n    this.state = {\n      data: undefined,\n      collapsedComments: [],\n      idToScrollTo: undefined,\n    };\n\n    this.anchorClickHandler = this.anchorClickHandler.bind(this);\n  }\n\n  render() {\n    if (this.state.data === undefined) {\n      return null;\n    }\n\n    console.log(\"scroll to ID\", this.state.idToScrollTo);\n\n    const storyData = this.state.data;\n\n    const storyLinkEl =\n      storyData.url === undefined ? (\n        <span>{storyData.title}</span>\n      ) : (\n        <a href={storyData.url}>{storyData.title}</a>\n      );\n\n    const comments = (storyData.kidsObj || []).filter(isValidComment);\n\n    document.title = `HN: ${storyData.title}`;\n\n    return (\n      <div>\n        <h2 style={{ overflowWrap: \"break-word\" }}>{storyLinkEl}</h2>\n        <h4>\n          <span>{storyData.by}</span>\n          <span>{\" | \"}</span>\n          <span>\n            {storyData.score}\n            {\" points\"}\n          </span>\n          <span>{\" | \"}</span>\n          <span>{timeSince(storyData.time)} ago</span>\n          <span>{\" | \"}</span>\n          <span>{getDomain(storyData.url)}</span>\n        </h4>\n        {storyData.text !== undefined && (\n          <p\n            className=\"top-text\"\n            dangerouslySetInnerHTML={{ __html: storyData.text }}\n          />\n        )}\n\n        <HnCommentList\n          childComments={comments}\n          canExpand={true}\n          depth={0}\n          collapsedIds={this.state.collapsedComments}\n          onUpdateOpen={(id, newOpen, scrollId) =>\n            this.handleCollapseEvent(id, newOpen, scrollId)\n          }\n          idToScrollTo={this.state.idToScrollTo}\n        />\n      </div>\n    );\n  }\n  handleCollapseEvent(\n    id: number,\n    newOpen: boolean,\n    scrollId: number | undefined\n  ): void {\n    // save the id to session storage\n\n    if (newOpen) {\n      // remove from list\n      const newIds = _.cloneDeep(this.state.collapsedComments);\n      _.remove(newIds, (c) => c === id);\n\n      sessionStorage.setItem(SESSION_COLLAPSED, JSON.stringify(newIds));\n      this.setState({ collapsedComments: newIds });\n    } else {\n      const newIds = this.state.collapsedComments.concat(id);\n\n      sessionStorage.setItem(SESSION_COLLAPSED, JSON.stringify(newIds));\n      this.setState({ collapsedComments: newIds });\n    }\n\n    if (scrollId !== undefined) {\n      this.setState({ idToScrollTo: scrollId });\n    }\n  }\n\n  componentDidMount() {\n    window.scrollTo(0, 0);\n\n    // set the data initially -- kick off async request if needed\n    this.updateDataFromDataLayer();\n    document.body.addEventListener(\"click\", this.anchorClickHandler);\n\n    const strCollapsedIds = sessionStorage.getItem(SESSION_COLLAPSED);\n    // load the collapsed comments from session storage\n\n    if (strCollapsedIds !== null) {\n      const collapsedIds = JSON.parse(strCollapsedIds) as number[];\n\n      this.setState({ collapsedComments: collapsedIds });\n    }\n  }\n\n  componentWillUnmount() {\n    document.body.removeEventListener(\"click\", this.anchorClickHandler);\n  }\n  anchorClickHandler(e: any) {\n    if (e.target.tagName !== \"A\") {\n      return;\n    }\n\n    // have a link\n\n    const link = e.target as HTMLAnchorElement;\n\n    const regex = /https?:\\/\\/news\\.ycombinator\\.com\\/item\\?id=(\\d+)/;\n    const matches = link.href.match(regex);\n\n    if (matches === null) {\n      link.target = \"_blank\";\n      return;\n    }\n\n    // this will navigate to the new page\n    this.props.history.push(\"/story/\" + matches[1]);\n\n    e.preventDefault();\n    return false;\n  }\n\n  private async updateDataFromDataLayer() {\n    const storyData = await this.getStoryData(this.props.id);\n\n    this.setState({ data: storyData });\n  }\n\n  componentDidUpdate(prevProps: HnStoryPageProps) {\n    // load the story once the data layer is available\n    if (prevProps.dataLayer === null && this.props.dataLayer !== null) {\n      this.updateDataFromDataLayer();\n    }\n  }\n\n  private async getStoryData(id: number): Promise<HnItem | undefined> {\n    return this.props.dataLayer === null\n      ? undefined\n      : await this.props.dataLayer.getStoryData(id);\n  }\n}\n","import \"./App.css\";\n\nimport _ from \"lodash\";\nimport React, { RefObject } from \"react\";\nimport { Route, RouteComponentProps, Switch, withRouter } from \"react-router\";\n\nimport { DataLayer } from \"./DataLayer\";\nimport { Header } from \"./Header\";\nimport { HnStoryList } from \"./HnStoryList\";\nimport { HnStoryPage } from \"./HnStoryPage\";\n\ninterface StoryPageProps extends RouteComponentProps<{ id: string }> {}\ninterface AppPageProps extends RouteComponentProps<{ page?: string }> {}\n\nclass _App extends React.Component<AppPageProps, AppState> {\n  dataLayer: RefObject<DataLayer>;\n\n  static getDerivedStateFromProps(props: AppPageProps, state: AppState) {\n    let listType: HnListSource;\n    switch (props.match.params.page) {\n      case \"day\":\n        listType = HnListSource.Day;\n        break;\n\n      case \"week\":\n        listType = HnListSource.Week;\n        break;\n\n      case \"month\":\n        listType = HnListSource.Month;\n        break;\n\n      default:\n        listType = HnListSource.Front;\n        break;\n    }\n\n    console.log(\"derived state\", props.match.params.page, listType);\n\n    return { ...state, activeList: listType };\n  }\n\n  constructor(props: AppPageProps) {\n    super(props);\n\n    this.state = {\n      items: [],\n      allItems: [],\n      activeList: HnListSource.Front,\n      error: undefined,\n      isLoading: false,\n    };\n\n    this.dataLayer = React.createRef();\n\n    this.updateActiveDataStore = this.updateActiveDataStore.bind(this);\n    this.newItemsProvided = this.newItemsProvided.bind(this);\n  }\n\n  updateActiveDataStore(items: HnItem[], isActive: boolean) {\n    if (isActive) {\n      this.setState({ items });\n    }\n\n    // this is needed to ensure that state updates are atomic\n    // all new items need to be joined together... cannot skip updatesÍ\n    this.setState((prevState) => {\n      let allItems = _.cloneDeep(prevState.allItems).concat(items);\n      allItems = _.uniqBy(allItems, (c) => c.id);\n      console.log(\"new all itemS\", allItems);\n      return { allItems };\n    });\n  }\n\n  render() {\n    console.log(\"render state\", this.state, this.dataLayer);\n\n    if (this.state.error !== undefined) {\n      return (\n        <div>\n          <p>an error occurred, refresh the page</p>\n          <p>\n            unfortunately, your local data was cleared to prevent corruption\n          </p>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <DataLayer\n          ref={this.dataLayer}\n          provideNewItems={this.newItemsProvided}\n          updateIsLoadingStatus={(isLoading) => this.setState({ isLoading })}\n          loadFreshSource={this.state.activeList}\n        />\n\n        <Header\n          requestNewData={() => {\n            if (!this.state.isLoading) {\n              this.dataLayer.current!.loadData(this.state.activeList);\n            }\n          }}\n          isLoading={this.state.isLoading}\n        />\n\n        <Switch>\n          <Route\n            path={\"/story/:id\"}\n            exact\n            render={(props: StoryPageProps) => (\n              <HnStoryPage\n                id={+props.match.params.id}\n                dataLayer={this.dataLayer.current}\n                history={props.history}\n                key={+props.match.params.id}\n              />\n            )}\n          />\n          <Route\n            path=\"/:page?\"\n            render={(props: AppPageProps) => (\n              <HnStoryList\n                items={\n                  this.dataLayer.current === null\n                    ? []\n                    : this.dataLayer.current.getPageData(\n                        props.match.params.page\n                      )\n                }\n                {...props}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    );\n  }\n\n  newItemsProvided(items: HnItem[], listType: HnListSource): void {\n    if (listType === this.state.activeList) {\n      this.setState({ items });\n    }\n  }\n}\n\nexport const App = withRouter(_App);\n\nexport enum HnListSource {\n  Front,\n  Day,\n  Week,\n  Month,\n}\n\ninterface AppState {\n  items: HnItem[];\n  allItems: HnItem[];\n\n  error: any;\n\n  activeList: HnListSource;\n\n  isLoading: boolean;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap-theme.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\n\nimport localForage from \"localforage\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport smoothscroll from \"smoothscroll-polyfill\";\n\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// kick off the polyfill!\nsmoothscroll.polyfill();\n\nwindow.onerror = function(msg, url, lineNo, columnNo, error) {\n  // ... handle error ...\n  console.error(\"major error\", msg);\n  localForage.clear();\n\n  document.body.innerHTML =\n    \"<h1>major error occurred.  local storage cleared to avoid corruption. please refresh</h1>\";\n};\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route path={\"/:page?\"}>\n      <App />\n    </Route>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}